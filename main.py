from rich.console import Console
from rich.prompt import Prompt
import random
from os import system

console = Console()

# Class repr√©sentant le jeu entier
class Game:
    def __init__(self, name: str):
        self.name = name
        self.main_player = None

        # Le joueur spawn dans le Tutoriel du jeu
        def spawn_interaction(place):
            naration = [
                ("-", "Vous vous r√©veillez lentement, d√©boussol√© vous entendez des bruits peu reconnaissables‚Ä¶"),
                ("-", "Vos yeux s'ouvrent lentement..."),
                ("Vous dans vos pens√©es", "Ou suis-je‚Ä¶? Quels sont ces bruits...?"),
                ("...", f"... ? ... !? {self.main_player.name} !!!?"),
                ("Vous, d√©boussol√©", "Ou.. Ou suis-je..? Et qui √™tes vous..?"),
                ("...", "Ah ! J'ai bien cru que vous √©tiez morte !"),
                ("Vous, lentement", "Mais qui..."),
                ("...", "Chut ! Laissez moi me pr√©senter, je me nome Loic et je serais ton guide tout au long de cette aventure !"),
                ("Vous, encore confus", "Une aventure ? Mais de quoi parlez-vous ?"),
                ("Loic, avec un sourir √©nigmatique", f"Ah, {self.main_player.name} ! Vous avez tant √† d√©couvrir. Vous vous trouvez dans un monde extraordinaire, rempli de magie et de myst√®res."),
                ("Vous, en vous redressant lentement", "Je ne comprends pas... Comment suis-je arriv√©e ici ?"),
                ("Loic", "C'est une excellente question, mais malheureusement, je n'ai pas la r√©ponse. Ce que je sais, c'est que vous avez un r√¥le crucial √† jouer dans ce monde."),
                ("Vous, en regardant autour de vous", "Et quel est ce r√¥le exactement ?"),
                ("Loic", f"Cela, {self.main_player.name}, c'est √† vous de le d√©couvrir. Mais ne vous inqui√©tez pas, je serai l√† pour vous guider √† chaque √©tape."),
                ("-", "Soudain, un bruit √©trange r√©sonne au loin. Loic se tourne brusquement."),
                ("Loic, d'un ton urgent", "Nous devons partir. Ce monde peut √™tre dangereux pour ceux qui ne le connaissent pas. Suivez-moi !"),
                ("-", "Vous h√©sitez un instant, puis d√©cidez de suivre Loic. Apr√®s tout, il semble √™tre votre seul alli√© dans ce monde √©trange."),
                ("-", "Alors que vous vous mettez en route, vous ne pouvez vous emp√™cher de vous demander ce qui vous attend dans cette myst√©rieuse aventure...")
            ]

            dialog.dialog(naration)
            
            # Faux D√©placement dans une zone fictive pour le tutoriel
            dialog.place_changement(self.places["Souflis Forest"].name)
            naration = [
                ["-", "La lumi√®re filtre √† travers les arbres d'une for√™t dense. L'air est rempli de murmures, comme si les feuilles elles-m√™mes chuchotaient des secrets oubli√©s. Loic marche devant vous, vif et attentif, se retournant de temps en temps pour s'assurer que vous le suivez."],
                ["Loic", f"Bienvenue, {self.main_player.name}, dans la For√™t des Souflis. Cet endroit est unique... et dangereux. Mais c'est aussi ici que commence votre apprentissage."],
                ["-", "Vous regardez autour de vous, observant les racines imposantes et les √©tranges champignons luminescents qui poussent dans l'obscurit√©. Vous sentez une pr√©sence, comme si la for√™t elle-m√™me vous scrutait."],
                ["Vous", "Apprentissage ? Que suis-je cens√©e apprendre ici ?"],
                ["Loic", "Les bases. Comment vous d√©fendre, comment survivre, et comment devenir suffisamment forte pour affronter ce qui vous attend. La qu√™te que vous portez ne sera pas facile. Mais avec chaque √©preuve, vous deviendrez plus puissante."],
                ["-", "Soudain, un mouvement furtif attire votre attention. Une petite cr√©ature, mi-lapin, mi-reptile, bondit hors d‚Äôun buisson. Elle vous fixe avec des yeux curieux."],
                ["Loic", f"Regardez, {self.main_player.name}. La nature vous offre d√©j√† votre premier d√©fi. Ces cr√©atures, les ‚Äò√âcho-lapins‚Äô, sont faibles, mais rapides. Attrapez-en un pour commencer. Vous devez vous familiariser avec le maniement de vos comp√©tences."],
                ["Vous", "Mais‚Ä¶ je ne sais m√™me pas comment faire √ßa."],
                ["Loic (riant doucement)", "C‚Äôest pourquoi je suis l√†. Regardez dans votre sac. Vous y trouverez une arme rudimentaire ‚Äì un b√¢ton, mais suffisant pour d√©buter. Maintenant, concentrez-vous."],
                ["-", "Vous ouvrez un petit sac en toile suspendu √† votre ceinture. Un b√¢ton, us√© mais solide, repose √† l‚Äôint√©rieur. Vous le saisissez avec h√©sitation."],
                ["Loic", "Bien. Maintenant, tenez-vous pr√™te. Ces cr√©atures sont petites, mais elles peuvent mordre si vous n‚Äô√™tes pas rapide. Concentrez votre √©nergie sur leur mouvement‚Ä¶ et frappez !"],
                ["-", "Un tutoriel interactif commence. Vous apprenez √† utiliser les commandes de base pour attaquer."],
            ]
            dialog.dialog(naration)
            
            #Pr√©sentation de l'objectif principal, drop et xp
            tutorielCombat = Combat(self.main_player, Monster(name="√âcho-lapin", description="Tutorial Mob", level=0, stats={"health": 10}, dropable_items=[], attack_list=[Attack(name="Cris du fauve", description="Le cris d'un lapin", battle_cry="Miaou ü•∫", durability=100, effect={})]))
            tutorielCombat.start()

            naration = [
                ["Vous", "Je l‚Äôai eu !"],
                ["Loic", f"Tr√®s bien, {self.main_player.name}. Chaque cr√©ature ici vous offre une le√ßon. Continuez ainsi, et bient√¥t, vous serez pr√™te √† affronter bien plus que des lapins."],
                ["-", "Alors que vous continuez votre exploration, Loic vous explique les m√©caniques du jeu."],
                ["Loic", "Dans cette for√™t, vous allez apprendre les fondamentaux. Voici ce que vous devez savoir pour progresser :\n1 - Exp√©rience et Niveaux : Chaque cr√©ature vaincue vous rapporte de l‚Äôexp√©rience. Plus vous en accumulez, plus vous montez en niveau, d√©bloquant de nouvelles comp√©tences et renfor√ßant vos capacit√©s."],
                ["Loic", "Dans cette for√™t, vous allez apprendre les fondamentaux. Voici ce que vous devez savoir pour progresser :\n2 - √âquipement : Vous trouverez des mat√©riaux dans les environs. Utilisez-les pour am√©liorer votre arme ou vous soigner."],
                ["Loic", "Dans cette for√™t, vous allez apprendre les fondamentaux. Voici ce que vous devez savoir pour progresser :\n3 - Qu√™te principale : Vous devrez r√©cup√©rer 4 cl√©s avant de pouvoir vous confronter au boss final se trouvant a HETIC (NABIL)."],
            ]
            dialog.dialog(naration)
            
            #T√©l√©portation dans la zone de farm         
            self.places["Souflis Forest"].interact()
            self.main_player.move(self.places["Souflis Forest"])
        
        #Zone For√™t des Souflis, zone de farm    
        def souflis_forest_interaction(place):
            
            #Menu de navigation
            choice = Prompt.ask("Choices :\n1 - Interact with the curent zone\n2 - Open the inventory\n3 - Go to the north (La Foire aux Illusions Perdues)\n4 - Go to the north-east (Domaine des Souflis)\n5 - Go to the east (HETIC)\n6 - Go to the south-east (Le Casino Zoologique)\n7 - Go to the south (Le temple des 1 000 moines)\n", choices=["1","2","3","4","5","6","7"])
            match choice:
                
                #Le joueur reste dans la For√™t des Souflis
                case "1":
                    
                    #Le monstre que va rencontrer le joueur sera de niveau plus ou moins √©quivalent √† ce dernier
                    player_level = self.main_player.level
                    monster_possibility = [monster_data for monster_data in self.monsters.values() if player_level - 2 <= monster_data["level"] <= player_level + 2]
                    
                    #Rencontre d'un monstre choisi al√©atoirement parmis la liste monster_possibility
                    if monster_possibility :
                        monster_fight = random.choice(monster_possibility)
                        
                        #Appel de la m√©thode self.start de la Class Combat
                        combat = Combat(self.main_player, Monster(**monster_fight))
                        combat.start()
                    else:
                        combat = Combat(self.main_player, Monster(**self.monsters["Hamid"]))
                        combat.start()
                    place.interact()
                case "2":
                    pass
                case "3":
                    self.main_player.move(self.places["La Foire aux Illusions Perdues"])
                case "4":
                    self.main_player.move(self.places["Domaine des Souflis"])
                case "5":
                    self.main_player.move(self.places["Hetic"])
                case "6":
                    self.main_player.move(self.places["Le Casino Zoologique"])
                case "7":
                    self.main_player.move(self.places["Le temple des 1 000 moines"])
                case _:
                    pass
        def la_foire_aux_illusions_perdues_interaction(place):
            pass

            dialog.dialog(naration)

            choice = Prompt.ask("Choisissez un objet :\n1 - Les boucles d‚Äôoreilles de la m√®re de Mathieu\n2 - Le bonnet l√©gendaire de Laurent\n3 - Un orbe magique scintillant\n", choices=["1","2","3"])
            monster = Monster(**self.monsters["Kevin"])
            match choice:
                case "1":
                    monster.stats["health"] += 20
                    self.main_player.stats["health"] -= 20
                case "2":
                    monster.stats["defense"] += 20
                    self.main_player.stats["attack"] -= 20
                case "3":
                    monster.stats["defense"] += 20
                    self.main_player.stats["defense"] -= 20
                case _:
                    pass

            naration = [
                ("-", "Vous h√©sitez, mais finissez par faire un choix. La vieille femme esquisse un sourire √©nigmatique avant de dispara√Ætre dans un nuage de fum√©e."),
                ("-", "Une fois la femme disparue, vous ressentez un √©trange frisson. En fouillant votre inventaire, vous r√©alisez que l‚Äôobjet choisi n‚Äôest pas l√†. Pire encore, vous sentez une partie de votre force vous quitter. Les statistiques que vous venez de perdre semblent avoir √©t√© vol√©es, comme si elles s‚Äô√©taient volatilis√©es dans l‚Äôair‚Ä¶ ou transf√©r√©es √† quelqu‚Äôun d‚Äôautre."),
                ("-", "Malgr√© cette exp√©rience troublante, vous continuez votre chemin et entrez dans ce qui reste de la f√™te foraine. Mais l‚Äôambiance y est compl√®tement diff√©rente de ce que vous aviez per√ßu de loin : tout est inerte, silencieux. Plus un bruit, plus un mouvement. Les lumi√®res des attractions vacillent, les ombres dansent, et un sentiment d‚Äôabandon vous envahit. Vous frissonnez √† nouveau."),
                ("-", "Une lumi√®re vive attire votre attention. Vous vous retournez et d√©couvrez une grande structure, effrayante et imposante : le Palais des Glaces. Le b√¢timent semble presque vivant, et une √©nergie sinistre s‚Äôen d√©gage. Vous comprenez que c‚Äôest votre seule option pour avancer. R√©solu, vous p√©n√©trez dans ce lieu √©trange, vos pas r√©sonnant dans un silence oppressant."),
                ("-", "L‚Äôint√©rieur est encore plus d√©routant : des miroirs d√©formants renvoient des images grotesques et inqui√©tantes de vous-m√™me. Chaque reflet semble amplifi√©, chaque pas r√©sonne comme un coup de tonnerre. Alors que vous progressez dans ce labyrinthe brillant et oppressant, un rire lointain r√©sonne soudain. Il est √† la fois malveillant et amus√©, semblant venir de partout √† la fois."),
                ("???", "Bienvenue dans MON domaine, intrus."),
                ("-", "Vous tournez fr√©n√©tiquement la t√™te, cherchant l‚Äôorigine de cette voix, mais tout ce que vous voyez, ce sont des ombres mouvantes et des √©clats de lumi√®re. Soudain, une silhouette bondit devant vous. Un homme masqu√©, v√™tu comme un clown sinistre, avec un immense marteau pos√© nonchalamment sur son √©paule."),
                ("K√©vin", "Tu crois pouvoir d√©fier le Souverain des Rires Perdus ? HAHAHA ! Pr√©pare-toi √† souffrir, petit joueur. Ce lieu est mon royaume, et ici, je fixe les r√®gles."),
                ("-", "K√©vin brandit son marteau et se jette sur vous. Vous esquivez de justesse et comprenez que vous n‚Äôavez pas d‚Äôautre choix que de vous battre.")
            ]

            dialog.dialog(naration)

            combat = Combat(self.main_player, monster)

            if combat:
                self.main_player.inventory.append(self.artefact[""])

            self.places["Ici tout le monde perd"].interact()
        def domaine_des_souflis_interaction(place):
            choice = Prompt.ask("Choices :\n1 - Interact with the curent zone\n2 - Open the inventory\n3 - Go to the south-west (Domaine des Souflis)\n", choices=["1","2","3"])
            match choice:
                case "1": # Lancement du donjon
                    naration = [
                        ("-", "Vous franchissez les portes massives du Domaine des Souflis. Le lieu est √† la fois majestueux et intimidant, avec des sculptures imposantes et des fresques murales racontant des l√©gendes anciennes. Au centre, une immense salle tr√¥ne sous un ciel artificiel √©clair√© par des cristaux lumineux. Vous ressentez une √©trange tension dans l'air, comme si chaque pierre murmurait des avertissements."),
                        ("Loic", f"Nous sommes arriv√©s, {self.main_plyer.name}. Voici le Domaine des Souflis. Mais restez sur vos gardes‚Ä¶ Nous ne sommes pas seuls."),
                        ("-", "Soudain, un bruit sourd r√©sonne. Une silhouette imposante s‚Äôavance, sortant de l‚Äôombre. C‚Äôest Anjalou, le fils du ma√Ætre du Casino Zoologique, Anjara, et actuel protecteur de Mathieu Souflis."),
                        ("-", f"{self.main_plyer.name} entre dans la maison et glisse l√©g√®rement sur le sol bien poli. Anjalou appara√Æt soudainement, v√™tu d‚Äôun costume √©l√©gant, son cr√¢ne parfaitement lustr√©. Il l√®ve les yeux et ajuste son chapeau avec un air sup√©rieur."),
                        ("Anjalou", "Ah, ma ch√®re, vous avez enfin d√©cid√© de faire acte de pr√©sence. Mais faites attention, ce sol n‚Äôest pas l√† pour √™tre sali !"),
                        ("-", f"Anjalou jette un coup d'≈ìil √† {self.main_plyer.name}, inspecte son propre reflet dans un miroir et se recoiffe en attendant sa r√©ponse."),
                        ("Anjalou (S'approchant)", "Je suis Anjalou, le garde du corps du Seigneur Souflis. Si vous avez l‚Äôintention de vous aventurer plus loin, je conseille vivement de respecter le code de la mode et de l‚Äô√©l√©gance... ainsi que de vous pr√©parer √† affronter le v√©ritable luxe.")
                    ]
                    dialog.dialog(naration)
                    combat = Combat(self.main_player, Monster(**self.monsters["Anjalou"]))
                    naration = [
                        ("-", f"Anjalou, en plein combat, esquive avec gr√¢ce avant de s'arr√™ter un instant pour polir son cr√¢ne. Puis, d'un coup, {self.main_plyer.name} r√©ussit √† le d√©stabiliser avec un coup d√©cisif. Anjalou tombe √† genoux, un dernier √©clat de lumi√®re se refl√©tant sur son cr√¢ne brillant."),
                        ("Anjalou", "M√™me la perfection doit un jour c√©der... Mais... mon cr√¢ne... il √©tait encore si... √©clatant..."),
                        ("-", "Il s'effondre doucement, lissant encore une fois son cr√¢ne avant de sombrer dans l'obscurit√©."),
                        ("-", "Vous entre dans une pi√®ce richement d√©cor√©e. Au fond, un homme se tient l√†, entour√© de tableaux et de meubles luxueux. Il porte des habits amples et une attitude d√©contract√©e, mais quelque chose semble √©trange, comme s'il dissimulait une puissance inou√Øe derri√®re cette apparence tranquille."),
                        ("Mathieu", "Ah, une nouvelle venue... Vous devez vous demander pourquoi un homme tel que moi se trouve ici, non ? Ne vous inqui√©tez pas, ce n'est pas la richesse qui vous int√©ressera ici. Vous vous appr√™tez √† rencontrer la v√©ritable force."),
                    ]
                    dialog.dialog(naration)
                    combat = Combat(self.main_player, Monster(**self.monsters["Mathieu"]))
                    naration = [
                        ("-", f"Apr√®s une bataille intense, Mathieu se tient encore debout, son corps gravement bless√©, mais une lueur de d√©fi dans ses yeux. Il soul√®ve son bras et regarde {self.main_plyer.name} avec une expression r√©solue."),
                        ("Mathieu", "Vous pensiez que la richesse √©tait ma v√©ritable arme ? Vous vous √™tes tromp√©e. J‚Äôai plus que √ßa sous cette couche de confort."),
                        ("-", "Il l√®ve son poing, pr√™t √† frapper une derni√®re fois, mais vous lui donnez un coup fatal avant qu'il ne puisse attaquer. Son corps s‚Äôeffondre lentement sur le sol, son sourire s'effa√ßant doucement, mais une lueur de respect dans ses yeux."),
                        ("Mathieu", "La... puissance... est... tout..."),
                    ]
                    dialog.dialog(naration)
                    self.main_player.inventory.append(self.artefact["Ecran du mac"])
                    self.places["Souflis Forest"].interact()
                case "2":
                    pass
                case "3":
                    self.main_player.move(self.places("Souflis Forest"))
                case _:
                    pass

        def le_casino_du_cartier_des_plaisirs_interaction(place):
            choice = Prompt.ask("Choices :\n1 - Interact with the curent zone\n2 - Open the inventory\n3 - Go to the North (La Foret des Souflis)\n", choices=["1","2","3"])
            match choice:
                case "1": # Lancement d'un combat + re envoi de l'interface a la fin du combat'
                    naration = [
                        ("-", "Apr√®s avoir travers√© la jungle dense et sauvage, vous d√©couvrez enfin une clairi√®re dissimul√©e par une v√©g√©tation luxuriante. Une lumi√®re vacillante brille √† travers les feuillages : c'est l'entr√©e du myst√©rieux Casino Zoologique. Une arche massive faite de lianes et de bois sculpt√© marque le passage vers ce lieu de vice et de hasard."),
                        ('-', "Deux imposants gorilles en costards, bras crois√©s, montent la garde devant une porte dor√©e orn√©e de pierres pr√©cieuses. Leur allure imposante et leur regard per√ßant suffisent √† dissuader quiconque de s‚Äôapprocher imprudemment."),
                        ("Garde Gorille 1 (ton grave et m√©fiant)", "H√© toi, petit humain. Bienvenue au Casino Zoologique, le repaire des √¢mes audacieuses."),
                        ("Garde Gorille 2 (d‚Äôun ton moqueur) ", "Conna√Ætras-tu la lumi√®re de la gloire ou te perdras-tu dans l‚Äôobscurit√© ? H√©h√©h√©‚Ä¶"),
                        ('-', "Vous semblez h√©sitant face √† ces deux colosses, mais vous affichez votre d√©termination."),
                        ("Garde Gorille 1 (impressionn√©, mais narquois)", "Tu viens pour d√©fier le Roi ? Tu as du cran, mais ne crois pas que ce sera aussi simple."),
                        ("Garde Gorille 2", "On pourrait juste te casser en deux, mais‚Ä¶ les r√®gles du casino sont claires. Ici, seule la chance d√©cide de ton sort."),
                        ("Garde Gorille 1", "Voici notre test : ce d√© pip√©. Tout ce que tu as √† faire, c‚Äôest obtenir un 12. Simple, non ?"),
                        ("Garde Gorille 2", "Bonne chance, humain‚Ä¶ ou devrais-je dire, bonne patience. Tant que tu n‚Äôy arrives pas, tu restes l√†. Mwahaha !")
                    ]
                    dialog.dialog(naration)

                    number = 0

                    while number != 12:
                        choice = Prompt.ask("Choisissez une action :\n1 - Lancer un d√©\n2 - Abandonner", choices=["1","2"])
                        if choice == 1:
                            number = random.randint(0, 12)
                            dialog.talk("-", f"Vous lancez un d√© et tombez sur le num√©ro {number}")
                            if number != 12:
                                dialog.talk("Garde Gorille 1", "Hahaha, tu as rat√© ! R√© essaie si tu l'ose...")
                        else: # Choice == 2
                            dialog.talk("Garde Gorille 1", "Pff, comme pr√©vu. Aucun humain ne peut rivaliser avec la jungle. Rentre chez toi, gamin.")
                            return self.places["Le casino du cartier des plaisirs"].interact()

                    naration = [
                        ("Garde Gorille 1 (√©tonn√©)", "Quoi ?! Tu as obtenu un 12 ? Eh bien, il semble que tu sois b√©ni par la chance aujourd‚Äôhui."),
                        ("Garde Gorille 2", "Bonne chance avec le Roi. Il n‚Äôest pas aussi gentil que nous‚Ä¶ H√© h√©."),
                        ("-", "Une fois √† l‚Äôint√©rieur, un monde flamboyant s‚Äôoffre √† vous : des chandeliers dor√©s suspendus au plafond, des tables de jeu illumin√©es par des n√©ons verts et rouges, et une foule de primates en effervescence. Les chimpanz√©s, habill√©s comme des croupiers, font tourner les tables, tandis que des l√©muriens occup√©s comptent des piles de jetons dans un coin sombre."),
                        ("-", "Au centre de la salle, sur un tr√¥ne taill√© dans un tronc d‚Äôarbre massif et recouvert de fourrure, tr√¥ne le Roi Anjara. C‚Äôest un gorille massif au pelage d‚Äôun noir brillant, v√™tu d‚Äôune cape en velours rouge. Un cigare pend mollement √† sa l√®vre, et une pile de cartes est pos√©e √† ses c√¥t√©s."),
                        ("Roi Anjara (voix rauque et dominante)", "Qui ose troubler la paix de mon royaume ?"),
                        ("-", "Il vous d√©visage avec intensit√©, puis se redresse lentement, √©crasant son cigare dans une coupe dor√©e."),
                        ("Roi Anjara", "Ah, un humain‚Ä¶ Tu veux te mesurer √† moi ? Sache que je ne joue pas seulement avec les cartes, mais avec les destins. Pr√©pare-toi, car ici, la triche est une vertu et la chance, un art.")
                    ]

                    dialog.dialog(naration)

                    combat = Combat(self.main_player, Monster(**self.monsters["Le Roi Singe"]))
                    combat.start()

                    self.main_player.inventory.append(self.artefact["Jeu de cartes"])
                    self.places["Le casino du cartier des plaisirs"].interact()
                case "2":
                    pass
                case "3":
                    self.main_player.move(self.places["Souflis Forest"])
                case _:
                    pass

        def le_temple_des_1000_moines_interaction(place):
            choice = Prompt.ask("Choices :\n1 - Interact with the curent zone\n2 - Open the inventory\n3 - Go to the North (La Foret des Souflis)\n", choices=["1","2","3"])
            match choice:
                case "1": # Lancement d'un combat + re envoi de l'interface a la fin du combat'
                    naration = [
                        ("-", "Vous arrivez au pied de la montagne qui abrite le l√©gendaire Temple des 1000 Moines. Une double porte imposante en bois rouge √©carlate se dresse devant vous, marquant l‚Äôentr√©e de ce sanctuaire ancien. Alors que vous vous approchez, les portes s‚Äôouvrent lentement dans un grincement solennel. Une silhouette √©lanc√©e se d√©tache dans l‚Äôombre du seuil."),
                        ('Leo', "Mes respects, jeune h√©ros. Je suis Leo, humble serviteur de ce temple sacr√©. Bienvenue au sanctuaire du Temple des 1000 Moines."),
                        ("Leo (s'inclinant l√©g√®rement)", "Mon ma√Ætre, Lao Ren, vous attendait avec impatience. Il dit que vous √™tes l'√âlu destin√© √† lib√©rer la For√™t des Souflis de l‚Äôemprise de la guilde HETIC. Cependant‚Ä¶"),
                        ("Leo (serrant fortement un baton l√©g√®rement)", "‚Ä¶je dois m'assurer que vous √™tes digne de rencontrer mon ma√Ætre. Pr√©parez-vous, jeune scarab√©e, car seul un esprit aff√ªt√© peut franchir cette porte !"),
                    ]
                    dialog.dialog(naration)
                    # COMBAT CONTRE LEO

                    naration = [
                        ("-", "Vous gravissez p√©niblement l‚Äôescalier interminable. √Ä chaque marche, la v√©g√©tation luxuriante de la for√™t des Souflis s‚Äô√©loigne, offrant une vue √† couper le souffle sur le paysage environnant. Enfin, au sommet, le temple se d√©voile, majestueux. Les trois pavillons principaux scintillent sous le soleil, leurs toits dor√©s √©tincelant comme des joyaux. Les murs ext√©rieurs racontent, √† travers des fresques, l‚Äôhistoire des 1000 moines qui atteignirent l‚Äôillumination en ces lieux.\nAlors que vous avancez, une voix grave et profonde r√©sonne dans le vent, semblant provenir de toutes les directions √† la fois."),
                        ("-", "Vous entendez une voix omnipr√©sente. \"Vous avez donc r√©ussi le d√©fi de mon disciple‚Ä¶ Suivez ma voix, h√©ros, et venez √† ma rencontre.\""),
                        ("-", "Vous atteignez la cour centrale, o√π le vent se fait plus vif. Soudain, un nuage de fum√©e s‚Äô√©l√®ve devant vous. De cette brume √©merge Lao Ren, le Gardien du Temple des 1000 Moines. Grand et imposant, v√™tu d‚Äôun habit de soie orn√© de motifs dor√©s, il tient un b√¢ton grav√© de symboles mystiques."),
                        ("Ma√Ætre Lao Ren", "Sacheburidana, h√©ros-sama. Je sais pourquoi vous √™tes l√†."),
                        ("-", "Le ma√Ætre, vous salue lentement, puis plante son b√¢ton au sol avec force."),
                        ("Ma√Ætre Lao ren", "Mais avant d‚Äôaccepter de vous remettre la relique sacr√©e, il est de mon devoir de tester votre force et votre volont√©. Ne perdons pas de temps... Affrontez-moi !")
                    ]
                    dialog.dialog(naration)
                    combat = Combat(self.main_player, Monster(**self.monsters["Lao-ren"]))
                    self.places["Souflis Forest"].interact()
                case "2":
                    pass
                case "3":
                    self.main_player.move(self.places["Souflis Forest"])
                case _:
                    pass

        def hetic_interaction(place):
            pass

        # Initialisation des places sans les connexions
        spawn = Place(name="Spawn", description="Le point de d√©part du joueur", monsters=[], interaction=spawn_interaction)
        souflis_forest = Place(name="Souflis Forest", description="Un endroit o√π vous pouvez trouver des ressources", monsters=[], interaction=souflis_forest_interaction)
        la_foire_aux_illusions_perdues = Place(name="La Foire aux Illusions Perdues", description="Un endroit o√π vous pouvez trouver des ressources", monsters=[], interaction=la_foire_aux_illusions_perdues_interaction)
        domaine_des_souflis = Place(name="Le domaine des Souflis", description="Un endroit o√π vous pouvez trouver des ressources", monsters=[], interaction=domaine_des_souflis_interaction)
        casino = Place(name="Le Casino Zoologique", description="Un endroit o√π vous pouvez trouver des ressources", monsters=[], interaction=le_casino_du_cartier_des_plaisirs_interaction)
        temple = Place(name="Le temple des 1 000 moines", description="Un endroit o√π vous pouvez trouver des ressources", monsters=[], interaction=le_temple_des_1000_moines_interaction)
        hetic = Place(name="Hetic", description="Un endroit o√π vous pouvez trouver des ressources", monsters=[], interaction=hetic_interaction)
        # Connexions entre les places
        spawn.places_around = {"east": souflis_forest}
        souflis_forest.places_around = {
            "west": spawn,
            "north": la_foire_aux_illusions_perdues,
            "north-east": domaine_des_souflis,
            "east": hetic,
            "south-east": casino,
            "south": temple,
        }
        la_foire_aux_illusions_perdues.places_around = {"south": souflis_forest}
        domaine_des_souflis.places_around = {"south-west": souflis_forest}
        casino.places_around = {"west": souflis_forest}
        temple.places_around = {"north-west": souflis_forest}
        hetic.places_around = {"west": souflis_forest}

        # Stockage des places
        self.places = {
            "Spawn": spawn,
            "Souflis Forest": souflis_forest,
            "La Foire aux Illusions Perdues": la_foire_aux_illusions_perdues,
            "Domaine des Souflis": domaine_des_souflis,
            "Le Casino Zoologique": casino,
            "Le temple des 1 000 moines": temple,
            "Hetic": hetic,
        }

        self.attacks = {
            "Bois de boulogne": Attack(name="Bois de boulogne", description="", battle_cry="", durability=100, damage=10),
            "Course rapide": Attack(name="Course rapide", description="", battle_cry="", durability=100, damage=10),
            "Souplesse du judoka": Attack(name="Souplesse du judoka", description="", battle_cry="Go muscu", durability=100, damage=10),
            "Poing de feu": Attack(name="Poing de feu", description="", battle_cry="Brule en enfer", durability=100, damage=10),
            "Coup de tonerre": Attack(name="Coup de tonerre", description="", battle_cry="√áa va piquer", durability=100, damage=10),
            "Grattage du d√©l√©gu√©": Attack(name="Grattage du d√©l√©gu√©", description="", battle_cry="Donne moi tes hp", durability=100, damage=10),
            "Lanc√© de talon": Attack(name="Lanc√© de talon", description="", battle_cry="Prend toi mon talon", durability=100, damage=10),
            "Griffure": Attack(name="Griffure", description="", battle_cry="Roarrrr", durability=100, damage=10),
            "Explosion": Attack(name="Explosion", description="", battle_cry="Araaaaa", durability=100, damage=10),
            "Vol rapide": Attack(name="Vol rapide", description="", battle_cry="Bismilah", durability=100, damage=10),
            "Charme": Attack(name="Charme", description="", battle_cry="Mouah üíã", durability=100, damage=10),
            "Chant brutal": Attack(name="Chant brutal", description="", battle_cry="D√®s que je chanterais tu deviendras sourd.", durability=100, damage=10),
            "Kamehameha": Attack(name="Kamehameha", description="", battle_cry="Redonne mon couscous", durability=100, damage=10),
            "Malaka": Attack(name="Malaka", description="", battle_cry="Mange mon grec", durability=100, damage=10),
            "Control Mental": Attack(name="Control Mental", description="", battle_cry="Au hazard", durability=100, damage=10),
            "Gear 5": Attack(name="Gear 5", description="", battle_cry="Youhouu", durability=100, damage=10),
            "Fara 1": Attack(name="Fara 1", description="", battle_cry="", durability=100, damage=10),
            "Fara 2": Attack(name="Fara 2", description="", battle_cry="", durability=100, damage=10),
            "Amel 1": Attack(name="Amel 1", description="", battle_cry="", durability=100, damage=10),
            "Amel 2": Attack(name="Amel 2", description="", battle_cry="", durability=100, damage=10),
            "Marteau du Forain": Attack(name="Marteau du Forain", description="", battle_cry="K√©vin abat son marteau avec fracas, d√©clenchant une onde de choc qui fait vibrer les miroirs autour de vous.", durability=100, damage=100),
            "Billes de Loterie Explosives": Attack(name="Billes de Loterie Explosives", description="", battle_cry="Il lance une poign√©e de billes color√©es qui explosent en gerbes de lumi√®re aveuglante.", durability=100, damage=100),
            "Claque de la Poigne Gigantesque": Attack(name="Claque de la Poigne Gigantesque", description="", battle_cry="Il pr√©pare une claque charg√©e, des veines lumineuses pulsent sur la main, et un bruit sourd de tension monte dans l‚Äôair. L‚Äôimpact cr√©e une onde de choc qui soul√®ve poussi√®re et d√©bris tout autour.", durability=1, damage=100),
            "Le Lasso de Soie": Attack(name="Le Lasso de Soie", description="Anjalou utilise un lasso en soie fine, qu'il fait briller comme une √©toile. Il l‚Äôenvoie avec √©l√©gance pour attraper ses ennemis et les ramener vers lui avec un mouvement fluide et gracieux.", battle_cry="TU M'ES ACCROCH√â‚Ä¶ ET J'AI UN CR√ÇNE √Ä PR√âSERVER !", durability=100, damage=100),
            "La Roulade du Gentleman": Attack(name="La Roulade du Gentleman", description="Anjalou effectue une roulade parfaitement chor√©graphi√©e, √©vitant les attaques ennemies tout en d√©cochant un coup de pied agile, comme un ma√Ætre de danse.", battle_cry="UNE DANSE AU RYTHME DU STYLE !", durability=100, damage=100),
            "Le Vent du Chapeau": Attack(name="Le Vent du Chapeau", description="Anjalou effectue un mouvement rapide, et son chapeau √©l√©gant se transforme en un projecteur de lumi√®re qui √©blouit temporairement les ennemis autour de lui.", battle_cry="MON STYLE, MA PUISSANCE !", durability=100, damage=100),
            "Le Cr√¢ne de Lumi√®re": Attack(name="Le Cr√¢ne de Lumi√®re", description="Anjalou se tient droit, prend une pause pour s'assurer que son cr√¢ne est parfaitement poli, puis lib√®re une lumi√®re aveuglante depuis son cr√¢ne chauve, envoyant une onde d'√©nergie brillante dans toute la zone. L'onde d√©stabilise ses ennemis, tout en r√©tablissant l‚Äô√©clat de son apparence avec une touche de perfection.", battle_cry="VOUS NE POUVEZ PAS FAIRE CONCURRENCE AVEC LE CR√ÇNE DU MA√éTRE !", durability=1, damage=100),
            "Le Marteau de la Banque": Attack(name="Le Marteau de la Banque", description="Mathieu fait appara√Ætre un √©norme marteau dor√© en forme de lingot et le balance violemment sur le sol, cr√©ant une onde de choc √©tincelante.", battle_cry="TA BOURSE NE VA PAS AIMER √áA !", durability=100, damage=100),
            "Le Lancer de Pi√®ce F√©tiche": Attack(name="Le Lancer de Pi√®ce F√©tiche", description="Il saisit une pi√®ce dor√©e et la propulse √† une vitesse fulgurante, frappant l‚Äôennemi directement entre les yeux.", battle_cry="C‚ÄôEST √Ä MOI QUE TU LA DOIS, LA MONNAIE !", durability=100, damage=100),
            "Le Coup du Pantalon Tra√Ætre": Attack(name="Le Coup du Pantalon Tra√Ætre", description="Mathieu arrache un pan de ses v√™tements et le fait tournoyer, cr√©ant un vent si puissant qu‚Äôil emporte ses adversaires.", battle_cry="CES FRINGUES NE SONT PAS JUSTE POUR LE STYLE !", durability=100, damage=100),
            "L‚Äô√âcran Noir de la Dette": Attack(name="L‚Äô√âcran Noir de la Dette", description="Mathieu tend les bras, et un immense √©cran translucide appara√Æt au-dessus de l‚Äôar√®ne, projetant une lumi√®re √©blouissante. Sur cet √©cran, une facture gigantesque s‚Äôaffiche avec des chiffres astronomiques qui clignotent, plongeant ses ennemis dans une terreur indescriptible.", battle_cry="ET SI TU PAYAIS TES IMP√îTS ?!", durability=1, damage=100),
            "Low Kick du Kangourou": Attack(name="Low Kick du Kangourou", description="", battle_cry="", durability=100, damage=100),
            "Bouclier du l√©murien": Attack(name="Bouclier du l√©murien", description="", battle_cry="", durability=100, damage=100),
            "D√©ferlante de la jungle": Attack(name="D√©ferlante de la jungle", description="", battle_cry="", durability=1, damage=100),
            "Coup du Lotus Bris√©": Attack(name="Coup du Lotus Bris√©", description="Un coup puissant et cibl√©, imitant l‚Äô√©closion brutale d‚Äôun lotus.", battle_cry="", durability=100, damage=100),
            "Sillage d‚ÄôEncens": Attack(name="Sillage d‚ÄôEncens", description="Une s√©rie de mouvements fluides lib√©rant une fum√©e toxique qui entrave les adversaires.", battle_cry="", durability=100, damage=100),
            "Col√®re des 1000 √Çmes": Attack(name="Col√®re des 1000 √Çmes", description="Le boss invoque les esprits des moines qui l‚Äôentourent pour d√©cha√Æner une temp√™te spirituelle d√©vastatrice.", battle_cry="", durability=1, damage=100),
        }

        self.items = {
            "Cl√© du casino" : Item(name="Cl√© du casino", description="Cette cl√© t'aidera a acceder au boss final !", effect={}),
            "Cl√© de la f√™te foraine" : Item(name="Cl√© de la f√™te foraine", description="Cette cl√© t'aidera a acceder au boss final !", effect={}),
            "Cl√© du temple" : Item(name="Cl√© du temple", description="Cette cl√© t'aidera a acceder au boss final !", effect={}),
            "Cl√© du Domaine" : Item(name="Cl√© du casino", description="Cette cl√© t'aidera a acceder au boss final !", effect={}),
            "Petite potion rouge": Consomable(name="Petite potion rouge", description="Potion donn√© par la d√©esse Ga√Øa (soigne)", effect={"hp": 5}, durability=1)
        }

        self.artefact = {
            "Ecran du mac": Equipable(name="Ecran du Mac", description="Utilis√© comme bouclier, c'est le fameu √©cran du Mac de Mathieu", effect={"defense": 10}),
            "Maxi Ph√¥ Boeuf": Equipable(name="Maxi Ph√¥ Boeuf", description="", effect={"damage":10}),
            "Jeu de cartes": Equipable(name="Jeu de cartes", description="", effect={})
        }

        self.monsters = {
            "Amelie": {
                "name":"Amelie",
                "description":"",
                "level":2,
                "stats":{},
                "attack_list":[self.attacks["Amel 1"], self.attacks["Amel 2"]],
                "dropable_items":[self.items["Petite potion rouge"]]},
            "Fara": {
                "name":"Fara",
                "description":"",
                "level":4,
                "stats":{},
                "attack_list":[self.attacks["Fara 1"], self.attacks["Fara 2"]],
                "dropable_items":[self.items["Petite potion rouge"]]},
            "Imen": {
                "name":"Imen",
                "description":"",
                "level":6,
                "stats":{},
                "attack_list":[self.attacks["Control Mental"], self.attacks["Gear 5"]],
                "dropable_items":[self.items["Petite potion rouge"]]},
            "Nazim": {
                "name":"Nazim",
                "description":"",
                "level":8,
                "stats":{},
                "attack_list":[self.attacks["Kamehameha"], self.attacks["Malaka"]],
                "dropable_items":[self.items["Petite potion rouge"]]},
            "Nana la renarde": {
                "name":"Nana la renarde",
                "description":"",
                "level":10,
                "stats":{},
                "attack_list":[self.attacks["Charme"], self.attacks["Chant brutal"]],
                "dropable_items":[self.items["Petite potion rouge"]]},
            "Youva": {
                "name":"Youva",
                "description":"",
                "level":12,
                "stats":{},
                "attack_list":[self.attacks["Explosion"], self.attacks["Vol rapide"]],
                "dropable_items":[self.items["Petite potion rouge"]]},
            "Carglass": {
                "name":"Carglass",
                "description":"",
                "level":14,
                "stats":{},
                "attack_list":[self.attacks["Lanc√© de talon"], self.attacks["Griffure"]],
                "dropable_items":[self.items["Petite potion rouge"]]},
            "Cherif": {
                "name":"Cherif",
                "description":"",
                "level":16,
                "stats":{},
                "attack_list":[self.attacks["Coup de tonerre"], self.attacks["Grattage du d√©l√©gu√©"]],
                "dropable_items":[self.items["Petite potion rouge"]]},
            "Noa": {
                "name":"Noa",
                "description":"",
                "level":18,
                "stats":{},
                "attack_list":[self.attacks["Souplesse du judoka"], self.attacks["Poing de feu"]],
                "dropable_items":[self.items["Petite potion rouge"]]},
            "Hamid": {
                "name":"Hamid",
                "description":"",
                "level":20,
                "stats":{},
                "attack_list":[self.attacks["Bois de boulogne"], self.attacks["Course rapide"]],
                "dropable_items":[self.items["Petite potion rouge"]]},
            "Kevin": {
                "name":"Kevin",
                "description":"Souverain des rires perdus",
                "level":1000,
                "stats":{},
                "attack_list":[self.attacks["Marteau du Forain"], self.attacks["Billes de Loterie Explosives"], self.attacks["Claque de la Poigne Gigantesque"]],
                "dropable_items":[self.items["Cl√© de la f√™te foraine"]]},
            "Anjaro": {
                "name":"Anjaro",
                "description":"Fils du Roi Singe",
                "level":1000,
                "stats":{},
                "attack_list":[self.attacks["Le Lasso de Soie"], self.attacks["La Roulade du Gentleman"], self.attacks["Le Vent du Chapeau"], self.attacks["Le Cr√¢ne de Lumi√®re"]],
                "dropable_items":[]},
            "Mathieu": {
                "name":"Mathieu",
                "description":"Riche investisseur",
                "level":1000,
                "stats":{},
                "attack_list":[self.attacks["Le Marteau de la Banque"], self.attacks["Le Lancer de Pi√®ce F√©tiche"], self.attacks["Le Coup du Pantalon Tra√Ætre"], self.attacks["L‚Äô√âcran Noir de la Dette"]],
                "dropable_items":[self.items["Cl√© du Domaine"]]},
            "Le Roi Singe": {
                "name":"Le Roi Singe",
                "description":"Dirigeant de la confr√©rie singeresque",
                "level":1000,
                "stats":{},
                "attack_list":[self.attacks["Low Kick du Kangourou"], self.attacks["Bouclier du l√©murien"], self.attacks["D√©ferlante de la jungle"]],
                "dropable_items":[self.items["Cl√© du casino"]]},
            "Lao-ren": {
                "name":"Lao-ren",
                "description":"Ma√Ætre Shaolin",
                "level":1000,
                "stats":{},
                "attack_list":[self.attacks["Coup du Lotus Bris√©"], self.attacks["Sillage d‚ÄôEncens"], self.attacks["Col√®re des 1000 √Çmes"]],
                "dropable_items":[self.items["Cl√© du temple"]]},
        }

    def start(self):
        console.print(f"[bold blue]Bienvenue dans {self.name}[/bold blue]")
        choice = Prompt.ask(
            "Faites un choix :\n0 - Cr√©er un monde\n1 - Charger un monde\n",
            choices=["0", "1"]
        )

        system("clear")

        if choice == "0":
            console.print("[green]Cr√©ation du personnage...[/green]")
            player_name = Prompt.ask("Quel nom souhaitez-vous donner √† votre personnage ?")
            system("clear")
            self.main_player = Player(
                name=player_name,
                level=1,
                xp=0,
                stats={"health": 100, "attack": 10, "defense": 5},
                attack_list=[],
                place= self.places["Spawn"]
            )

            self.main_player.place.interact()


class Entity:
    def __init__(self, name: str, description: str, level: int, xp: float, stats: dict, attack_list: list) :
        self.name = name
        self.description = description
        self.level = level
        self.xp = xp
        self.stat = stats or {"health" : 100, "attack": 10, "defense": 5}
        self.max_hp = self.stat["health"]
        self.attack_list = attack_list or []

    def attack(self, target) -> None:
        if not self.attack_list:
            console.print(f"{self.name} n'a aucune attaque disponible")
        
        attack_chosen = None
        if type(target) is  Player:
            attack_chosen = random.choice(self.attack_list)
        elif type(target) is Monster :
            choices = "\n".join([f"{i} - {attack.name}" for i, attack in enumerate(self.attack_list)])
            attack_chosen = self.attack_list[int(Prompt.ask(f"Choisissez votre attaque :\n{choices}\n", choices=[str(i) for i in range(len(self.attack_list))]))]
            
        damage = max(attack_chosen.damage + self.stat["attack"] - self.stat["defense"], 0)
        console.print(f"{self.name} attaque {target.name} avec {attack_chosen['name']} et inflige {damage}.")
        target.take_damage(-damage, "attack")

    def change_stats(self, amount: int, damage_type: str) -> None:

        if damage_type == "health" :
            self.stat["health"] += amount
            self.stat["health"] = max(self.stat["health"], 0)

            console.print(f"La sant√© de {self.name} {"augmente" if amount > 0 else "descend"} de {amount}. Sant√© : {self.stat['health']}")
            if self.stat["health"] <= 0:
                console.print(f"{self.name} est vaincu")
        elif damage_type == "attack" :
            self.stat["attack"] += amount
            self.stat["attack"] = max(self.stat["attack"], 0)
            console.print(f"L'attaque de {self.name} {"augmente" if amount > 0 else "descend"} de {amount}. Attaque : {self.stat['attack']}")
        elif damage_type == "defense" :
            self.stat["defense"] += amount
            self.stat["defense"] = max(self.stat["defense"], 0)
            console.print(f"La d√©fense de {self.name} {"augmente" if amount > 0 else "descend"} de {amount}. D√©fense : {self.stat['defense']}")


class Monster(Entity):
    def __init__(self, name: str, description: str, level: int, stats: dict, attack_list: list, dropable_items: list):
        super().__init__(name, description, level, 0, stats, attack_list)
        self.dropable_items = dropable_items

    def calculate_drops(self):
        dropped_items = []
        for item, drop_chance in self.dropable_items:
            if random.randint(0, 100) <= drop_chance:
                dropped_items.append(item)
        return dropped_items



class Player(Entity):
    def __init__(self, name: str, level: int, xp: float, stats: dict, attack_list: list, place ):
        super().__init__(name, "", level, xp, stats, attack_list)
        self.inventory = []
        self.place = place

    def show_inventory(self):
        if len(self.inventory) <= 0:
            return console.print(f"\L'inventaire de {self.name} est vide")
        else : 
            console.print(f"\ L'inventaire de {self.name}")
            for index, item in enumerate(self.inventory):

                item_details = f"{index}. {item.name} - {item.description}" if hasattr(item,"description") else f"{index}.{item.name}"
                console.print(item_details)
                console.print(f"Nombre d'item : {len(self.inventory)}")

    def use_item(self, item_index):
        for index, item in enumerate(self.inventory):
            if index == item_index:
                if hasattr(item, "use"):
                    console.print(f"{self.name} utilise {item.name}")
                    item.use(self)
                    self.inventory.pop(item_index)
                else:
                    console.print(f"(Vous ne pouvez pas utiliser {item.name} sur vous)")
                return
        console.print(f"{item.name} n'est pas dans votre inventaire")

    def add_xp(self, amount : float):
        self.xp += amount
        while self.xp >= self.level_up_threshold():
            self.xp -= self.level_up_threshold()
            self.level_up()
        console.print(f"Vous venez de gagner {amount} XP !")
    
    def level_up_threshold(self):
        base_xp = 100
        growth_rate = 1.5
        return base_xp * (growth_rate ** (self.level - 1))

    def move(self, place):
        pass

    def level_up(self):
        self.level += 1
        print(f"Vous venez de passer au niveau {self.level}")

        for stat, value in self.stats.items():
            increase = int(value*0.1)
            self.stats[stat] += increase
            console.print(f"vos statistiques sont augment√©es de {increase} pour {self.stats[stat]} !")
        
        #On d√©bloque des nouvelles attaques ?

class Place:
    def __init__(self, name: str, description: str, monsters: list, interaction, places_around=None):
        self.name = name
        self.description = description
        self.places_around = places_around or {}
        self.monsters = monsters
        self.exploration = False
        self.interaction = interaction

    def interact(self):
        self.interaction(self)


class Combat:
    def __init__(self, player, opponent):
        self.turn_number = 0 
        self.player = player
        self.opponent = opponent
        self.active_player = random.randint(0 , 1) # 0 = Player /  1 = Monster // D√©termine celui qui commence en premier 
    #D√©but du combat
    def start(self):
        console.print(f"[red]Vous vous appr√™tez √† vous battre contre {self.opponent.name}...\n QUE LE COMBAT COMMENCE[/red]")
        
        #Boucle des tours du combat    
        while self.player.stat["health"] != 0 and self.opponent.stat["health"] != 0 :
                          
            #Affichage des PV √† chaque d√©but de tour
            console.print(f"[bold]Vous avez {self.player.stat["health"]} PV. \n {self.opponent.name} a {self.opponent.stat["health"]} PV.") 
            self.turn()
        
        #Termine le combat si l'un des deux Entity tombe √† 0 PV.    
        self.end()

    #Alternateur de tours        
    def turn(self):
        if self.active_player == 0:
            console.print(f"[cyan]Tour {self.turn_number}: {self.player.name}, √† vous de jouer![/cyan]")
            self.player_turn()
        else:
            console.print(f"[magenta]Tour {self.turn_number}: {self.opponent.name} attaque![/magenta]")
            self.opponent_turn() 
        
                
        #Inversion de active_player apr√®s chaque tour (alterne entre 0 et 1)
        self.active_player = 1 - self.active_player
        
        #Compteur de tours
        self.turn_number += 1

    #Tour du PLayer
    def player_turn(self):
        
            #Menu principal du tour de combat
            action = Prompt.ask("Choisissez une action\n1 - Attaquer\n2 - Inventaire\n3 - Fuir", choices = ["1","2","3"],)

            #Le Player choisit d'attaquer
            if action == '1':
                #Appel de la m√©thode self.attack de la class Entity
                self.player.attack(self.opponent)
            #Le Player choisit d'ouvrir son Inventaire pour le REGARDER    
            elif action == '2' :
                #Appel de la m√©thode self.show_inventory de la class Entity  
                self.player.show_inventory()

                choices = [index for index, item in enumerate(self.player.inventory) if isinstance(item, Consomable)]
                choices.append("Back")
                item_choice = Prompt.ask(f"Choisissez un item a utiliser:\n{"\n".join([f"{index} - {item} : {item.description}" for index, item in enumerate(self.player.inventory) if isinstance(item, Consomable)])}\nBack - Re venir en ari√®re", choices=choices)

                if item_choice == "Back":
                    return self.player_turn()
                else:
                    self.player.use_item(int(item_choice))
                #Le player choisit de s'enfuir
            elif action == '3' :
                #Appel de le fonction self.escape pour 
                    self.end()
    
    #Tour de l'adversaire        
    def opponent_turn(self):

        #Appel de la m√©thode self.attack de la class Entity
        self.opponent.attack(self.player)
    
    #Fin du combat
    def end(self):
        
        #Si l'adversaire est √† 0 PV
        if self.opponent.stat["health"] <= 0 :
            
            #Ajoute l'xp au h√©ro, 10 * Le niveau du monstre
            amount_xp = 10 * self.opponent.level
            self.player.add_xp(amount_xp)
            
            #Drop du monstre, dropable_items = la liste des drops du monstre / Appel de la m√©thode self.calculate_drops de la class Entity
            drop_items = self.opponent.calculate_drops(self.dropable_items)
            for item in drop_items:
                self.player.inventory.append(item)

            Console.print("Le combat est termin√© !")
            Console.print(f"[cyan]Vous avez vaincu {self.opponent.name} \n vous avez gagne {amount_xp} xp, il vous manque ... xp pour augmenter de niveau \n Vous avez trouv√© {drop_items}[/cyan]")
     
        #Si le Player est √† 0 PV   
        elif self.player.stat["health"] <= 0 :
            
            #Le player perd le combat, retour √† la base    
            Console.print("[red]Vous avez √©t√© vaincu comme un Looser que vous √™tes ! Vous retournez au spawn bredouille ![/red]")          
            # PEUT ETRE TP AU SPAWN
    
        #Le joueur s'enfuit du combat
        else:
            Console.print("[cyan]Vous arrivez √† vous enfuir comme un l√¢che ![/cyan]")
            # PEUT ETRE TP AU SPAWN

class Item:
    def __init__(self, name: str, description: str, effect: dict):
        self.name = name
        self.descritpion = description
        self.effect = effect
        effect = {
            "health": 10
        }
        effect = {
            "attack": 10,
            "defense": 10
        }

class Equipable(Item):
    def __init__(self, name: str, description: str, effect: dict):
        super().__init__(name, description, effect)
        self.equiped = False
    def equip(self, target):
        #  A MODIFIER
        if not self.equipped:
            for stat, value in self.effect.items():
                target.stat[stat] += value
            self.equipped = True
            console.print(f"{self.name} est maintenant √©quip√© !")
        else:
            console.print(f"{self.name} est d√©j√† √©quip√©.")



class Consomable(Item):
    def __init__(self, name: str, description: str, effect: dict, durability: int):
        super().__init__(name, description, effect)
        self.active = False
        self.durability = durability

    def use(self, target):
        if "health" in self.effect and target.max_health > target.stats["health"]:
               if self.effect["health"] < target.max_health - target.stats["health"] :
                   target.stats["health"] += self.effect["health"]
               else :
                   target.stats["health"] = target.max_health
        elif "attack" in self.effect:
            target.stats["attack"] += self.effect["attack"]
        else :
            target.stats["defense"] += self.effect["defense"]

    def use(self, target):
        for stat, value in self.effect.items():
            if stat in target.stat:
                target.change_stats(value, stat)
        console.print(f"{self.name} a √©t√© utilis√© avec succ√®s !")
class Attack:
    def __init__(self, name: str, description: str, battle_cry: str, durability: int, damage: int):
        self.name = name
        self.description = description
        self.battle_cry = battle_cry
        self.durability = durability
        self.damage = damage

class Dialog:
    def dialog(self, dialog: list):
        for speaker, text in dialog:
            if speaker == "-":
                self.naration(text)
            else:
                self.talk(speaker, text)

    def place_changement(self, new_place: str):
        system("clear")
        Prompt.ask(f"[bold][green]Vous changez d'endroit...\nBienvenue dans [underline]{new_place}[/underline][/green][/bold]")

    def talk(self, speaker:str, text: str):
        system("clear")
        Prompt.ask(f"[blue]{speaker} >[/blue] {text}\n\nAppuyez sur enter pour continuer..")

    def naration(self, text):
        system("clear")
        Prompt.ask(f"[yellow]VOIX OFF >[/yellow] {text}\n\nAppuyez sur enter pour continuer..")

class Dialog:
    def dialog(self, dialog: list):
        for speaker, text in dialog:
            if speaker == "-":
                self.naration(text)
            else:
                self.talk(speaker, text)

    def place_changement(self, new_place: str):
        system("clear")
        Prompt.ask(f"[bold][green]Vous changez d'endroit...\nBienvenue dans [underline]{new_place}[/underline][/green][/bold]")

    def talk(self, speaker:str, text: str):
        system("clear")
        Prompt.ask(f"[blue]{speaker} >[/blue] {text}\n\nAppuyez sur enter pour continuer..")

    def naration(self, text):
        system("clear")
        Prompt.ask(f"[yellow]VOIX OFF >[/yellow] {text}\n\nAppuyez sur enter pour continuer..")


if __name__ == "__main__":
    dialog = Dialog()
    game = Game("Mon RPG")
    game.start()

