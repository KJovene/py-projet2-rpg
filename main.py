"""
GROUPE : KEVIN, LAURENT, ANJARA, MATHIEU

Nous sommes d√©sol√© de ne pas avoir d√©coup√© le code mais nous avons ajout√© beaucoup de commentaires pour vous faciliter la vie.
Vous pouvez appuyer longtemps sur entrer pour passer les dialogues plus rapidement.
"""

from rich.console import Console
from rich.prompt import Prompt
from classes.Stick import Stick
import random
from os import system

console = Console()

# Classe repr√©sentant le jeu entier
class Game:
    """
    Repr√©sente le jeu entier.
    """
    def __init__(self, name: str):
        """
        Initialise le jeu avec un nom et configure le joueur principal et les lieux.
        
        Args:
            name (str): Le nom du jeu.
        """
        self.name = name
        self.main_player = Player("SAPAL", 0, 0, [], None)



        # Le joueur spawn dans le Tutoriel du jeu
        def spawn_interaction(place):
            naration = [
                ("-", "Vous vous r√©veillez lentement, d√©boussol√©, vous entendez des bruits peu reconnaissables‚Ä¶"),
                ("-", "Vos yeux s'ouvrent lentement..."),
                ("Vous dans vos pens√©es", "O√π suis-je‚Ä¶? Quels sont ces bruits...?"),
                ("...", f"... ? ... !? {self.main_player.name} !!!?"),
                ("Vous, d√©boussol√©", "O√π... O√π suis-je..? Et qui √™tes-vous..?"),
                ("...", "Ah ! J'ai bien cru que vous √©tiez mort !"),
                ("Vous, lentement", "Mais qui..."),
                ("...", "Chut ! Laissez-moi me pr√©senter, je me nomme Loic et je serai ton guide tout au long de cette aventure !"),
                ("Vous, encore confus", "Une aventure ? Mais de quoi parlez-vous ?"),
                ("Loic, avec un sourire √©nigmatique", f"Ah, {self.main_player.name} ! Vous avez tant √† d√©couvrir. Vous vous trouvez dans un monde extraordinaire, rempli de magie et de myst√®res."),
                ("Vous, en vous redressant lentement", "Je ne comprends pas... Comment suis-je arriv√© ici ?"),
                ("Loic", "C'est une excellente question, mais malheureusement, je n'ai pas la r√©ponse. Ce que je sais, c'est que vous avez un r√¥le crucial √† jouer dans ce monde."),
                ("Vous, en regardant autour de vous", "Et quel est ce r√¥le exactement ?"),
                ("Loic", f"Cela, {self.main_player.name}, c'est √† vous de le d√©couvrir. Mais ne vous inqui√©tez pas, je serai l√† pour vous guider √† chaque √©tape."),
                ("-", "Soudain, un bruit √©trange r√©sonne au loin. Loic se tourne brusquement."),
                ("Loic, d'un ton urgent", "Nous devons partir. Ce monde peut √™tre dangereux pour ceux qui ne le connaissent pas. Suivez-moi !"),
                ("-", "Vous h√©sitez un instant, puis d√©cidez de suivre Loic. Apr√®s tout, il semble √™tre votre seul alli√© dans ce monde √©trange."),
                ("-", "Alors que vous vous mettez en route, vous ne pouvez vous emp√™cher de vous demander ce qui vous attend dans cette myst√©rieuse aventure...")
            ]

            dialog.dialog(naration)

            # Faux D√©placement dans une zone fictive pour le tutoriel
            dialog.place_changement(self.places["Souflis Forest"].name)
            naration = [
                ["-", "La lumi√®re filtre √† travers les arbres d'une for√™t dense. L'air est rempli de murmures, comme si les feuilles elles-m√™mes chuchotaient des secrets oubli√©s. Loic marche devant vous, vif et attentif, se retournant de temps en temps pour s'assurer que vous le suivez."],
                ["Loic", f"Bienvenue, {self.main_player.name}, dans la For√™t des Souflis. Cet endroit est unique... et dangereux. Mais c'est aussi ici que commence votre apprentissage."],
                ["-", "Vous regardez autour de vous, observant les racines imposantes et les √©tranges champignons luminescents qui poussent dans l'obscurit√©. Vous sentez une pr√©sence, comme si la for√™t elle-m√™me vous scrutait."],
                ["Vous", "Apprentissage ? Que suis-je cens√© apprendre ici ?"],
                ["Loic", "Les bases. Comment vous d√©fendre, comment survivre, et comment devenir suffisamment fort pour affronter ce qui vous attend. La qu√™te que vous portez ne sera pas facile. Mais avec chaque √©preuve, vous deviendrez plus puissant."],
                ["-", "Soudain, un mouvement furtif attire votre attention. Une petite cr√©ature, mi-lapin, mi-reptile, bondit hors d'un buisson. Elle vous fixe avec des yeux curieux."],
                ["Loic", f"Regardez, {self.main_player.name}. La nature vous offre d√©j√† votre premier d√©fi. Ces cr√©atures, les '√âcho-lapins', sont faibles, mais rapides. Attrapez-en un pour commencer. Vous devez vous familiariser avec le maniement de vos comp√©tences."],
                ["Vous", "Mais‚Ä¶ je ne sais m√™me pas comment faire √ßa."],
                ["Loic (riant doucement)", "C'est pourquoi je suis l√†. Regardez dans votre sac. Vous y trouverez une arme rudimentaire - un b√¢ton, mais suffisant pour d√©buter. Maintenant, concentrez-vous."],
                ["-", "Vous ouvrez un petit sac en toile suspendu √† votre ceinture. Un b√¢ton, us√© mais solide, repose √† l'int√©rieur. Vous le saisissez avec h√©sitation."],
                ["Loic", "Bien. Maintenant, tenez-vous pr√™t. Ces cr√©atures sont petites, mais elles peuvent mordre si vous n'√™tes pas rapide. Concentrez votre √©nergie sur leur mouvement‚Ä¶ et frappez !"],
                ["-", "Un tutoriel interactif commence. Vous apprenez √† utiliser les commandes de base pour attaquer."],
            ]
            dialog.dialog(naration)

            #Tutoriel de combat
            tutorielCombat = Combat(self.main_player, Monster(name="√âcho-lapin", description="Tutorial Mob", level=1, dropable_items=[Consomable(**self.items["Petite potion rouge"], drop_rate=100)], attack_list=[Attack(name="Cris du fauve", description="Le cris d'un lapin", battle_cry="Miaou ü•∫", durability=100, damage=5)]))
            tutorielCombat.start()

            #Pr√©sentation de l'objectif principal, drop et xp
            naration = [
                ["Vous", "Je l'ai eu !"],
                ["Loic", f"Tr√®s bien, {self.main_player.name}. Chaque cr√©ature ici vous offre une le√ßon. Continuez ainsi, et bient√¥t, vous serez pr√™t √† affronter bien plus que des lapins."],
                ["-", "Alors que vous continuez votre exploration, Loic vous explique les m√©caniques du jeu."],
                ["Loic", "Dans cette for√™t, vous allez apprendre les fondamentaux. Voici ce que vous devez savoir pour progresser :\n1 - Exp√©rience et Niveaux : Chaque cr√©ature vaincue vous rapporte de l'exp√©rience. Plus vous en accumulez, plus vous montez en niveau, d√©bloquant de nouvelles comp√©tences et renfor√ßant vos capacit√©s."],
                ["Loic", "Dans cette for√™t, vous allez apprendre les fondamentaux. Voici ce que vous devez savoir pour progresser :\n2 - √âquipement : Vous trouverez des mat√©riaux dans les environs. Utilisez-les pour am√©liorer votre arme ou vous soigner."],
                ["Loic", "Dans cette for√™t, vous allez apprendre les fondamentaux. Voici ce que vous devez savoir pour progresser :\n3 - Qu√™te principale : Vous devrez r√©cup√©rer 4 cl√©s avant de pouvoir vous confronter au boss final se trouvant a HETIC."],
            ]
            dialog.dialog(naration)

            #T√©l√©portation dans la zone de farm
            self.places["Souflis Forest"].interact(self.main_player)
            self.main_player.move(self.places["Souflis Forest"])

        #Zone For√™t des Souflis, zone de farm
        def souflis_forest_interaction(place):

            #Menu de navigation
            choice = Prompt.ask("Choices :\n1 - Interact with the curent zone\n2 - Open the inventory\n3 - Go to the north (La Foire aux Illusions Perdues)\n4 - Go to the north-east (Domaine des Souflis)\n5 - Go to the east (HETIC)\n6 - Go to the south-east (Le Casino Zoologique)\n7 - Go to the south (Le temple des 1 000 moines)\n", choices=["1","2","3","4","5","6","7"])
            match choice:

                #Le joueur reste dans la For√™t des Souflis
                case "1":

                    #Le monstre que va rencontrer le joueur sera de niveau plus ou moins √©quivalent √† ce dernier
                    player_level = self.main_player.level
                    monster_possibility = [monster_data for monster_data in self.monsters.values() if player_level - 2 <= monster_data["level"] <= player_level + 2 and monster_data["boss"] == False]

                    #Rencontre d'un monstre choisi al√©atoirement parmis la liste monster_possibility
                    if monster_possibility :
                        monster_fight = random.choice(monster_possibility)

                        #Appel de la m√©thode self.start de la Class Combat
                        combat = Combat(self.main_player, Monster(**monster_fight))
                        combat.start()
                    else:
                        combat = Combat(self.main_player, Monster(**self.monsters["Hamid"]))
                        combat.start()
                    place.interact(self.main_player)

                #Le joueur ouvre son inventaire et choisi d'utiliser un objet ou non
                case "2":                  
                    self.main_player.interact_with_inventory()
                    place.interact(self.main_player)
                #Le joueur se d√©place au Nord vers le Sanctuaire de K√©vin
                case "3":
                    self.main_player.move(self.places["La Foire aux Illusions Perdues"])
                #Le joueur se d√©place au Nord-est vers le Sanctuaire de Mathieu
                case "4":
                    self.main_player.move(self.places["Domaine des Souflis"])
                #Le Joueur se d√©place √† l'Est vers le donjon final HETIC
                case "5":
                    required_keys = ["Cl√© du casino", "Cl√© de la f√™te foraine", "Cl√© du temple", "Cl√© du Domaine"]
                    missing_keys = []
                    for key_name in required_keys:
                        if not key_name in [item.name for item in self.main_player.inventory]:
                            missing_keys.append(key_name)
                    if len(missing_keys) == 0:
                        dialog.naration("Vous utilisez vos clefs pour entrer dans Hetic")
                        self.main_player.move(self.places["Hetic"])
                    else:
                        dialog.naration("Vous n'avez pas les clefs n√©cessaires pour entrer √† Hetic")
                        place.interact(self.main_player)
                case "6":
                    self.main_player.move(self.places["Le Casino Zoologique"])
                #Le joueur se d√©place au Sud vers le Sanctuaire de Laurent
                case "7":
                    self.main_player.move(self.places["Le temple des 1 000 moines"])
                case _:
                    pass

        #Le joueur arrive devant la Foire aux Illusions perdues
        def la_foire_aux_illusions_perdues_interaction(place):
            #Menu de navigation de la Foire aux Illusions Perdues
            choice = Prompt.ask("Choices :\n1 - Interact with the current zone\n2 - Open the inventory\n3 - Go to the south (Souflis Forest)\n", choices=["1", "2", "3"])
            match choice:
                case "1":
                    naration = [
                        ("-", "Apr√®s avoir quitt√© la dense et myst√©rieuse For√™t des Souflis, vous arrivez sur un sentier escarp√©."),
                        ("-", "En contrebas, un √©trange spectacle attire votre attention : un lieu qui ressemble √† une f√™te foraine, bruyant et lumineux, plein de mouvement. Intrigu√©, vous descendez le sentier sinueux, curieux d'explorer cet endroit qui semble d√©tonner dans cette nature sauvage."),
                        ("-", "Mais plus vous approchez, plus les d√©tails vous troublent : la 'f√™te foraine' semble minuscule compar√©e √† ce que vous aviez vu de loin. Quelques tentes d√©labr√©es, des attractions √† moiti√© effondr√©es, et une ambiance bien plus lugubre qu'invitante. Vous ressentez un frisson d√©sagr√©able."),
                        ("-", "Soudain, une vieille femme surgit de l'ombre et vous agrippe le bras avec une poigne √©tonnamment ferme pour son √¢ge."),
                        ("Vieille Femme", "Alors, jeune √¢me t√©m√©raire‚Ä¶ que fais-tu ici, perdu au milieu de nulle part ?"),
                        ("Vous", "Je me suis √©gar√© apr√®s avoir quitt√© la For√™t des Souflis."),
                        ("Vieille Femme", "Oh, comme c'est mignon. Mais tu as de la chance d'√™tre tomb√© sur moi, car je peux t'aider. Cependant, tout a un prix ici... Je vais te proposer des objets et tu devras en choisir un."),
                        ("Vieille Femme", "Chacun de ces objets a des avantages uniques pour la suite de ton aventure. Mais choisis bien, car tu ne pourras jamais revenir en arri√®re.")
                    ]

                    dialog.dialog(naration)
                    #La voyante demande au joueur de choisir son malus
                    choice = Prompt.ask("Choisissez un objet :\n1 - Les boucles d'oreilles de la m√®re de Mathieu\n2 - Le bonnet l√©gendaire de Laurent\n3 - Un orbe magique scintillant\n", choices=["1","2","3"])
                    monster = Monster(**self.monsters["Kevin"])
                    match choice:
                        #Le boss vole 20 PV au joueur
                        case "1":
                            monster.stat["health"] += 20
                            monster.max_hp += 20
                            self.main_player.stat["health"] -= 20
                        #Le boss vole 20 d'attaque au joueur
                        case "2":
                            monster.stat["defense"] += 20
                            self.main_player.stat["attack"] -= 20
                        #Le boss vole 20 de d√©fense au joueur
                        case "3":
                            monster.stat["defense"] += 20
                            self.main_player.stat["defense"] -= 20
                        case _:
                            pass

                    naration = [
                        ("-", "Vous h√©sitez, mais finissez par faire un choix. La vieille femme esquisse un sourire √©nigmatique avant de dispara√Ætre dans un nuage de fum√©e."),
                        ("-", "Une fois la femme disparue, vous ressentez un √©trange frisson. En fouillant votre inventaire, vous r√©alisez que l'objet choisi n'est pas l√†. Pire encore, vous sentez une partie de votre force vous quitter. Les statistiques que vous venez de perdre semblent avoir √©t√© volatilis√©es dans l'air‚Ä¶ ou transf√©r√©es √† quelqu'un d'autre."),
                        ("-", "Malgr√© cette exp√©rience troublante, vous continuez votre chemin et entrez dans ce qui reste de la f√™te foraine. Mais l'ambiance y est compl√®tement diff√©rente de ce que vous aviez per√ßu de loin : tout est inerte, silencieux. Plus un bruit, plus un mouvement. Les lumi√®res des attractions vacillent, les ombres dansent, et un sentiment d'abandon vous envahit. Vous frissonnez √† nouveau."),
                        ("-", "Une lumi√®re vive attire votre attention. Vous vous retournez et d√©couvrez une grande structure, effrayante et imposante : le Palais des Glaces. Le b√¢timent semble presque vivant, et une √©nergie sinistre s'en d√©gage. Vous comprenez que c'est votre seule option pour avancer. R√©solu, vous p√©n√©trez dans ce lieu √©trange, vos pas r√©sonnant dans un silence oppressant."),
                        ("-", "L'int√©rieur est encore plus d√©routant : des miroirs d√©formants renvoient des images grotesques et inqui√©tantes de vous-m√™me. Chaque reflet semble amplifi√©, chaque pas r√©sonne comme un coup de tonnerre. Alors que vous progressez dans ce labyrinthe brillant et oppressant, un rire lointain r√©sonne soudain. Il est √† la fois malveillant et amus√©, semblant venir de partout √† la fois."),
                        ("???", "Bienvenue dans MON domaine, intrus."),
                        ("-", "Vous tournez fr√©n√©tiquement la t√™te, cherchant l'origine de cette voix, mais tout ce que vous voyez, ce sont des ombres mouvantes et des √©clats de lumi√®re. Soudain, une silhouette bondit devant vous. Un homme masqu√©, v√™tu comme un clown sinistre, avec un immense marteau pos√© nonchalamment sur son √©paule."),
                        ("K√©vin", "Tu crois pouvoir d√©fier le Souverain des Rires Perdus ? HAHAHA ! Pr√©pare-toi √† souffrir, petit joueur. Ce lieu est mon royaume, et ici, je fixe les r√®gles."),
                        ("-", "K√©vin brandit son marteau et se jette sur vous. Vous esquivez de justesse et comprenez que vous n'avez pas d'autre choix que de vous battre.")
                    ]

                    dialog.dialog(naration)

                    #Lancement du Combat contre K√©vin, le Boss du donjon
                    combat = Combat(self.main_player, monster)
                    

                    #Si le combat est gagn√©, le joueur drop l'artefact (Petit canard +20PV max)
                    if combat.start():
                        naration = [ 
                            ("-", "K√©vin s'√©croule au sol, haletant, son masque tombant pour r√©v√©ler un visage fatigu√© mais amus√©."),
                            ("Kevin", "Hahaha‚Ä¶ √ßa faisait longtemps que je n'avais pas perdu‚Ä¶ Bien jou√©, √©tranger. Tu as prouv√© ta valeur. Prends ce tr√©sor, il pourrait t'√™tre utile."),
                            ("-", "Vous d√©couvrez un coffre √† moiti√© ouvert au fond de la pi√®ce. √Ä l'int√©rieur, un canard en plastique jaune semble vous attendre. Sous le canard, un num√©ro myst√©rieux est grav√©.")
                        ]
                        dialog.dialog(naration)
                    else:
                        match choice:
                            #Le boss vole 20 PV au joueur
                            case "1":
                                pass
                            #Le boss vole 20 d'attaque au joueur
                            case "2":
                                self.main_player.stat["attack"] += 20
                            #Le boss vole 20 de d√©fense au joueur
                            case "3":
                                self.main_player.stat["defense"] += 20
                            case _:
                                pass
                        return place.interact(self.main_player)

                    #Retour √† l'entr√©e de la Foire // Ouvre le menu d'int√©raction
                    place.interact(self.main_player)
                case "2":
                    self.main_player.interact_with_inventory()
                    place.interact(self.main_player)
                case "3":
                    self.main_player.move(self.places["Souflis Forest"])
                case _:
                    pass

        #Le joueur arrive devant le Domaine des Souflis
        def domaine_des_souflis_interaction(place):
            #Menu de navigation du Domaine des Souflis
            choice = Prompt.ask("Choices :\n1 - Interact with the curent zone\n2 - Open the inventory\n3 - Go to the south-west (Domaine des Souflis)\n", choices=["1","2","3"])
            match choice:
                case "1": # Lancement du donjon
                    naration = [
                        ("-", "Vous franchissez les portes massives du Domaine des Souflis. Le lieu est √† la fois majestueux et intimidant, avec des sculptures imposantes et des fresques murales racontant des l√©gendes anciennes. Au centre, une immense salle tr√¥ne sous un ciel artificiel √©clair√© par des cristaux lumineux. Vous ressentez une √©trange tension dans l'air, comme si chaque pierre murmurait des avertissements."),
                        ("Loic", f"Nous sommes arriv√©s, {self.main_player.name}. Voici le Domaine des Souflis. Mais restez sur vos gardes‚Ä¶ Nous ne sommes pas seuls."),
                        ("-", "Soudain, un bruit sourd r√©sonne. Une silhouette imposante s'avance, sortant de l'ombre. C'est Anjalou, le fils du ma√Ætre du Casino Zoologique, Anjara, et actuel protecteur de Mathieu Souflis."),
                        ("-", f"{self.main_player.name} entre dans la maison et glisse l√©g√®rement sur le sol bien poli. Anjalou appara√Æt soudainement, v√™tu d'un costume √©l√©gant, son cr√¢ne parfaitement lustr√©. Il l√®ve les yeux et ajuste son chapeau avec un air sup√©rieur."),
                        ("Anjalou", "Ah, mon cher, vous avez enfin d√©cid√© de faire acte de pr√©sence. Mais faites attention, ce sol n'est pas l√† pour √™tre sali !"),
                        ("-", f"Anjalou jette un coup d'≈ìil √† {self.main_player.name}, inspecte son propre reflet dans un miroir et se recoiffe en attendant sa r√©ponse."),
                        ("Anjalou (S'approchant)", "Je suis Anjalou, le garde du corps du Seigneur Souflis. Si vous avez l'intention de vous aventurer plus loin, je conseille vivement de respecter le code de la mode et de l'√©l√©gance... ainsi que de vous pr√©parer √† affronter le v√©ritable luxe.")
                    ]
                    dialog.dialog(naration)
                    #Lancement du combat interm√©diaire contre Anjalou
                    combat = Combat(self.main_player, Monster(**self.monsters["Anjalou"]))
                    

                    if combat.start():
                        return place.interact(self.main_player)

                    naration = [
                        ("-", f"Anjalou, en plein combat, esquive avec gr√¢ce avant de s'arr√™ter un instant pour polir son cr√¢ne. Puis, d'un coup, {self.main_player.name} r√©ussit √† le d√©stabiliser avec un coup d√©cisif. Anjalou tombe √† genoux, un dernier √©clat de lumi√®re se refl√©tant sur son cr√¢ne brillant."),
                        ("Anjalou", "M√™me la perfection doit un jour c√©der... Mais... mon cr√¢ne... il √©tait encore si... √©clatant..."),
                        ("-", "Il s'effondre doucement, lissant encore une fois son cr√¢ne avant de sombrer dans l'obscurit√©."),
                        ("-", "Vous entrez dans une pi√®ce richement d√©cor√©e. Au fond, un homme se tient l√†, entour√© de tableaux et de meubles luxueux. Il porte des habits amples et une attitude d√©contract√©e, mais quelque chose semble √©trange, comme s'il dissimulait une puissance inou√Øe derri√®re cette apparence tranquille."),
                        ("Mathieu", "Ah, un nouveau venu... Vous devez vous demander pourquoi un homme tel que moi se trouve ici, non ? Ne vous inqui√©tez pas, ce n'est pas la richesse qui vous int√©ressera ici. Vous vous appr√™tez √† rencontrer la v√©ritable force."),
                    ]
                    dialog.dialog(naration)

                    #Lancement du combat contre le boss du donjon Mathieu
                    combat = Combat(self.main_player, Monster(**self.monsters["Mathieu"]))

                    if combat.start():
                        return place.interact(self.main_player)

                    naration = [
                        ("-", f"Apr√®s une bataille intense, Mathieu se tient encore debout, son corps gravement bless√©, mais une lueur de d√©fi dans ses yeux. Il soul√®ve son bras et regarde {self.main_player.name} avec une expression r√©solue."),
                        ("Mathieu", "Vous pensiez que la richesse √©tait ma v√©ritable arme ? Vous vous √™tes tromp√©. J'ai plus que √ßa sous cette couche de confort."),
                        ("-", "Il l√®ve son poing, pr√™t √† frapper une derni√®re fois, mais vous lui donnez un coup fatal avant qu'il ne puisse attaquer. Son corps s'effondre lentement sur le sol, son sourire s'effa√ßant doucement, mais une lueur de respect dans ses yeux."),
                        ("Mathieu", "La... puissance... est... tout..."),
                    ]
                    dialog.dialog(naration)

                    #Retour devant le Domaine des Souflis
                    place.interact(self.main_player)
                case "2":
                    self.main_player.interact_with_inventory()
                    place.interact(self.main_player)
                case "3":
                    self.main_player.move(self.places["Souflis Forest"])
                case _:
                    pass

        def le_casino_zoologique_interaction(place): #Toujours changer le nom de cette zone
            choice = Prompt.ask("Choices :\n1 - Interact with the curent zone\n2 - Open the inventory\n3 - Go to the North (La Foret des Souflis)\n", choices=["1","2","3"])
            match choice:
                case "1": # Lancement d'un combat + re envoi de l'interface a la fin du combat'
                    naration = [
                        ("-", "Apr√®s avoir travers√© la jungle dense et sauvage, vous d√©couvrez enfin une clairi√®re dissimul√©e par une v√©g√©tation luxuriante. Une lumi√®re vacillante brille √† travers les feuillages : c'est l'entr√©e du myst√©rieux Casino Zoologique. Une arche massive faite de lianes et de bois sculpt√© marque le passage vers ce lieu de vice et de hasard."),
                        ('-', "Deux imposants gorilles en costards, bras crois√©s, montent la garde devant une porte dor√©e orn√©e de pierres pr√©cieuses. Leur allure imposante et leur regard per√ßant suffisent √† dissuader quiconque de s'approcher imprudemment."),
                        ("Garde Gorille 1 (ton grave et m√©fiant)", "H√© toi, petit humain. Bienvenue au Casino Zoologique, le repaire des √¢mes audacieuses."),
                        ("Garde Gorille 2 (d'un ton moqueur) ", "Conna√Ætras-tu la lumi√®re de la gloire ou te perdras-tu dans l'obscurit√© ? H√©h√©h√©‚Ä¶"),
                        ('-', "Vous semblez h√©sitant face √† ces deux colosses, mais vous affichez votre d√©termination."),
                        ("Garde Gorille 1 (impressionn√©, mais narquois)", "Tu viens pour d√©fier le Roi ? Tu as du cran, mais ne crois pas que ce sera aussi simple."),
                        ("Garde Gorille 2", "On pourrait juste te casser en deux, mais‚Ä¶ les r√®gles du casino sont claires. Ici, seule la chance d√©cide de ton sort."),
                        ("Garde Gorille 1", "Voici notre test : ce d√© pip√©. Tout ce que tu as √† faire, c'est obtenir un 12. Simple, non ?"),
                        ("Garde Gorille 2", "Bonne chance, humain‚Ä¶ ou devrais-je dire, bonne patience. Tant que tu n'y arrives pas, tu restes l√†. Mwahaha !")
                    ]
                    dialog.dialog(naration)

                    number = 0

                    while number != 12:
                        choice = int(Prompt.ask("Choisissez une action :\n1 - Lancer un d√©\n2 - Abandonner", choices=["1","2"]))
                        if choice == 1:
                            number = random.randint(0, 12)
                            dialog.talk("-", f"Vous lancez un d√© et tombez sur le num√©ro {number}")
                            if number != 12:
                                dialog.talk("Garde Gorille 1", "Hahaha, tu as rat√© ! R√© essaie si tu l'oses...")
                        else: # Choice == 2
                            dialog.talk("Garde Gorille 1", "Pff, comme pr√©vu. Aucun humain ne peut rivaliser avec la jungle. Rentre chez toi, gamin.")
                            return place.interact(self.main_player)

                    naration = [
                        ("Garde Gorille 1 (√©tonn√©)", "Quoi ?! Tu as obtenu un 12 ? Eh bien, il semble que tu sois b√©ni par la chance aujourd'hui."),
                        ("Garde Gorille 2", "Bonne chance avec le Roi. Il n'est pas aussi gentil que nous‚Ä¶ H√© h√©."),
                        ("-", "Une fois √† l'int√©rieur, un monde flamboyant s'offre √† vous : des chandeliers dor√©s suspendus au plafond, des tables de jeu illumin√©es par des n√©ons verts et rouges, et une foule de primates en effervescence. Les chimpanz√©s, habill√©s comme des croupiers, font tourner les tables, tandis que des l√©muriens occup√©s comptent des piles de jetons dans un coin sombre."),
                        ("-", "Au centre de la salle, sur un tr√¥ne taill√© dans un tronc d'arbre massif et recouvert de fourrure, tr√¥ne le Roi Anjara. C'est un gorille massif au pelage d'un noir brillant, v√™tu d'une cape en velours rouge. Un cigare pend mollement √† sa l√®vre, et une pile de cartes est pos√©e √† ses c√¥t√©s."),
                        ("Roi Anjara (voix rauque et dominante)", "Qui ose troubler la paix de mon royaume ?"),
                        ("-", "Il vous d√©visage avec intensit√©, puis se redresse lentement, √©crasant son cigare dans une coupe dor√©e."),
                        ("Roi Anjara", "Ah, un humain‚Ä¶ Tu veux te mesurer √† moi ? Sache que je ne joue pas seulement avec les cartes, mais avec les destins. Pr√©pare-toi, car ici, la triche est une vertu et la chance, un art.")
                    ]

                    dialog.dialog(naration)

                    combat = Combat(self.main_player, Monster(**self.monsters["Le Roi Singe"]))

                    if combat.start():
                        return place.interact(self.main_player)

                    place.interact(self.main_player)
                case "2":
                    self.main_player.interact_with_inventory()
                    place.interact(self.main_player)
                case "3":
                    self.main_player.move(self.places["Souflis Forest"])
                case _:
                    pass

        def le_temple_des_1000_moines_interaction(place):
            choice = Prompt.ask("Choices :\n1 - Interact with the curent zone\n2 - Open the inventory\n3 - Go to the North (La Foret des Souflis)\n", choices=["1","2","3"])
            match choice:
                case "1": # Lancement d'un combat + re envoi de l'interface a la fin du combat'
                    naration = [
                        ("-", "Vous arrivez au pied de la montagne qui abrite le l√©gendaire Temple des 1000 Moines. Une double porte imposante en bois rouge √©carlate se dresse devant vous, marquant l'entr√©e de ce sanctuaire ancien. Alors que vous vous approchez, les portes s'ouvrent lentement dans un grincement solennel. Une silhouette √©lanc√©e se d√©tache dans l'ombre du seuil."),
                        ('Leo', "Mes respects, jeune h√©ros. Je suis Leo, humble serviteur de ce temple sacr√©. Bienvenue au sanctuaire du Temple des 1000 Moines."),
                        ("Leo (s'inclinant l√©g√®rement)", "Mon ma√Ætre, Lao Ren, vous attendait avec impatience. Il dit que vous √™tes l'√âlu destin√© √† lib√©rer la For√™t des Souflis de l'emprise de la guilde HETIC. Cependant‚Ä¶"),
                        ("Leo (serrant fortement un petit baton)", "‚Ä¶je dois m'assurer que vous √™tes digne de rencontrer mon ma√Ætre. Pr√©parez-vous, jeune scarab√©e, car seul un esprit aff√ªt√© peut franchir cette porte !"),
                    ]
                    dialog.dialog(naration)
                    # Jeu du baton contre pour entrer dans le temple
                    stick_game = Stick("Disciple L√©o", self.main_player)
                    if not stick_game.stick_start():
                        return place.interact(self.main_player)
                    naration = [
                        ("-", "Vous avez r√©ussi √† battre L√©o dans un jeu de b√¢ton. Il vous adresse un sourire chaleureux et vous invite √† entrer dans le temple."),
                        ("-", "Vous gravissez p√©niblement l'escalier interminable. √Ä chaque marche, la v√©g√©tation luxuriante de la for√™t des Souflis s'√©loigne, offrant une vue √† couper le souffle sur le paysage environnant. Enfin, au sommet, le temple se d√©voile, majestueux. Les trois pavillons principaux scintillent sous le soleil, leurs toits dor√©s √©tincelant comme des joyaux. Les murs ext√©rieurs racontent, √† travers des fresques, l'histoire des 1000 moines qui atteignirent l'illumination en ces lieux.\nAlors que vous avancez, une voix grave et profonde r√©sonne dans le vent, semblant provenir de toutes les directions √† la fois."),
                        ("-", "Vous entendez une voix omnipr√©sente. \"Vous avez donc r√©ussi le d√©fi de mon disciple‚Ä¶ Suivez ma voix, h√©ros, et venez √† ma rencontre.\""),
                        ("-", "Vous atteignez la cour centrale, o√π le vent se fait plus vif. Soudain, un nuage de fum√©e s'√©l√®ve devant vous. De cette brume √©merge Lao Ren, le Gardien du Temple des 1000 Moines. Grand et imposant, v√™tu d'un habit de soie orn√© de motifs dor√©s, il tient un b√¢ton grav√© de symboles mystiques."),
                        ("Ma√Ætre Lao Ren", "Sacheburidana, h√©ros-sama. Je sais pourquoi vous √™tes l√†."),
                        ("-", "Le ma√Ætre, vous salue lentement, puis plante son b√¢ton au sol avec force."),
                        ("Ma√Ætre Lao ren", "Mais avant d'accepter de vous remettre la relique sacr√©e, il est de mon devoir de tester votre force et votre volont√©. Ne perdons pas de temps... Affrontez-moi !")
                    ]
                
                    dialog.dialog(naration)
                    combat = Combat(self.main_player, Monster(**self.monsters["Lao-ren"]))

                    if combat.start():
                        return place.interact(self.main_player)
                    place.interact(self.main_player)
                    
                case "2":
                    self.main_player.interact_with_inventory()
                    place.interact(self.main_player)
                case "3":
                    self.main_player.move(self.places["Souflis Forest"])
                case _:
                    pass

        def hetic_interaction(place):
          choice = Prompt.ask("Choices :\n1 - Interact with the curent zone\n2 - Open the inventory\n3 - Go to the North (La Foret des Souflis)\n", choices=["1","2","3"])

          match choice:
            case "1": # Lancement d'un combat + re envoi de l'interface a la fin du combat'
                #Arriv√©e √† Hetic
                naration = [
                    ("-", "Vous arrivez au bout du long chemin vous menant √† la sombre fa√ßade d'un batiment."),
                    ("-", "Vous observez un grand portail, puis prenant votre courage √† deux mains, vous utilisez vos forces pour ouvir cette porte. Vous avancez dans une grande cour rempli de brouillard et apercevez un silouhette."),
                    ("Alexandre","Eh bien...on dirait que les singes et les moines ne sont plus aussi f√©roce qu'avant"),
                    ("-", "Cet entrepreneur vous analyse enti√®rement, et semble se pr√©parer √† agir"),
                    ("Alexandre", "Allez, finis de jouer. Tu vas payer pour toutes les conf√©rences que tu as rat√©es, y'avait pas un monde o√π tu n'y √©tais pas.")
                ]
                dialog.dialog(naration)
                combat = Combat(self.main_player, Monster(**self.monsters["Alexandre"]))
                if not combat.start():
                    place.interact(self.main_player)
                naration = [
                    ("Alexandre", "Mais...coment un mortel peut d√©tenir autant de puissance? Tu as donc r√©uni tous les outils pour trouver une alternance?"),
                    ("-", "Votre combat bat son plein contre le grand chef heticien. Soudain une brume √©paisse appara√Æt, et une silouhette encore plus grande apparait. Vous sentez une nouvelle pr√©sence dans la cour..."),
                    ("-", "Alexandre disparait peu √† peu, et vous apercevez un homme v√™tu d'un superbe costume bleu."),
                    ("Nabil", "Sacril√®ge, je ne peux donc plus compter sur ce bon vieux Alexandre. EH OUI ! C'est bien moi Nabil Lmrabet, celui qui tire les ficelles derri√®re tout ce qui se passe dans ce monde. Aller humain, montre moi tout ce que ton voyage t'as appris, ou p√©ris dans les entrailles de mon √©cole.")
                ]
                dialog.dialog(naration)
                combat = Combat(self.main_player, Monster(**self.monsters["Nabil"]))
                if not combat.start():
                    place.interact(self.main_player)
                
                if combat:
                    naration = [
                        ("Nabil", "Impossible... Comment as-tu pu me vaincre ?!"),
                        ("-", "Vous regardez autour de vous, le silence r√®gne. Vous avez r√©ussi. Vous avez vaincu tous les obstacles et triomph√© de tous les ennemis."),
                        ("-", "Vous ressentez un m√©lange de soulagement et de fiert√©. Vous avez accompli votre qu√™te."),
                        ("-", "Alors que vous vous appr√™tez √† quitter les lieux, une lumi√®re √©clatante vous entoure. Vous √™tes t√©l√©port√© dans un endroit familier."),
                        ("Loic", "F√©licitations, {self.main_player.name}. Vous avez r√©ussi l√† o√π tant d'autres ont √©chou√©. Vous √™tes un v√©ritable h√©ros."),
                        ("-", "Vous souriez, sachant que votre aventure est termin√©e, mais que de nouvelles qu√™tes vous attendent peut-√™tre √† l'avenir."),
                    ]
                    dialog.dialog(naration)
                    return self.end()
                else:
                    return place.interact(self.main_player)
                
            case "2":
                self.main_player.interact_with_inventory()
                place.interact(self.main_player)
            case "3":
                self.main_player.move(self.places["Souflis Forest"])
            case _:
                pass


        # Initialisation des places sans les connexions
        spawn = Place(name="Spawn", description="Le point de d√©part du joueur", monsters=[], interaction=spawn_interaction)
        souflis_forest = Place(name="Souflis Forest", description="Un endroit o√π vous pouvez trouver des ressources", monsters=[], interaction=souflis_forest_interaction)
        la_foire_aux_illusions_perdues = Place(name="La Foire aux Illusions Perdues", description="Un endroit o√π vous pouvez trouver des ressources", monsters=[], interaction=la_foire_aux_illusions_perdues_interaction)
        domaine_des_souflis = Place(name="Le domaine des Souflis", description="Un endroit o√π vous pouvez trouver des ressources", monsters=[], interaction=domaine_des_souflis_interaction)
        casino = Place(name="Le Casino Zoologique", description="Un endroit o√π vous pouvez trouver des ressources", monsters=[], interaction=le_casino_zoologique_interaction)
        temple = Place(name="Le temple des 1 000 moines", description="Un endroit o√π vous pouvez trouver des ressources", monsters=[], interaction=le_temple_des_1000_moines_interaction)
        hetic = Place(name="Hetic", description="Un endroit o√π vous pouvez trouver des ressources", monsters=[], interaction=hetic_interaction)
        # Connexions entre les places
        spawn.places_around = {"east": souflis_forest}
        souflis_forest.places_around = {
            "west": spawn,
            "north": la_foire_aux_illusions_perdues,
            "north-east": domaine_des_souflis,
            "east": hetic,
            "south-east": casino,
            "south": temple,
        }
        la_foire_aux_illusions_perdues.places_around = {"south": souflis_forest}
        domaine_des_souflis.places_around = {"south-west": souflis_forest}
        casino.places_around = {"west": souflis_forest}
        temple.places_around = {"north-west": souflis_forest}
        hetic.places_around = {"west": souflis_forest}

        spawn.interaction = spawn_interaction
        souflis_forest.interaction = souflis_forest_interaction
        la_foire_aux_illusions_perdues.interaction = la_foire_aux_illusions_perdues_interaction
        domaine_des_souflis.interaction = domaine_des_souflis_interaction
        casino.interaction = le_casino_zoologique_interaction
        temple.interaction = le_temple_des_1000_moines_interaction
        hetic.interaction = hetic_interaction

        # Stockage des places
        self.places = {
            "Spawn": spawn,
            "Souflis Forest": souflis_forest,
            "La Foire aux Illusions Perdues": la_foire_aux_illusions_perdues,
            "Domaine des Souflis": domaine_des_souflis,
            "Le Casino Zoologique": casino,
            "Le temple des 1 000 moines": temple,
            "Hetic": hetic,
        }

        self.attacks = {
            "Bois de boulogne": {"name": "Bois de boulogne", "description": "Je me souvient de ma for√™t natale..", "battle_cry": "YAAAAAAH", "durability": -1, "damage": 65},
            "Course rapide": {"name": "Course rapide", "description": "Je cours tr√®s tr√®s vite !!!", "battle_cry": "HYPER VITESSE !!!!", "durability": -1, "damage": 60},
            "Souplesse du judoka": {"name": "Souplesse du judoka", "description": "Avec la fluidit√© et la puissance d'un Teddy Riner prime, projette l'adversaire au sol avec une gr√¢ce impeccable", "battle_cry": "Go muscu", "durability": -1, "damage": 60},
            "Poing de feu": {"name": "Poing de feu", "description": "Poing litt√©ralement enflamm√©", "battle_cry": "Brule en enfer", "durability": -1, "damage": 55},
            "Coup de tonerre": {"name": "Coup de tonerre", "description": "Appelle la foudre de fa√ßon mystique", "battle_cry": "√áa va piquer", "durability": -1, "damage": 55},
            "Grattage du d√©l√©gu√©": {"name": "Grattage du d√©l√©gu√©", "description": "Faut bien s'entourer...", "battle_cry": "Donne moi tes hp", "durability": -1, "damage": 50},
            "Lanc√© de talon": {"name": "Lanc√© de talon", "description": "Lance un talon mais ce n'est pas une chaussure..", "battle_cry": "Prend toi mon talon", "durability": -1, "damage": 45},
            "Griffure": {"name": "Griffure", "description": "Des ongles t'as peur", "battle_cry": "Roarrrr", "durability": -1, "damage": 40},
            "Explosion": {"name": "Explosion", "description": "Boom", "battle_cry": "Araaaaa", "durability": -1, "damage": 40},
            "Vol rapide": {"name": "Vol rapide", "description": "UN HUMAIN QUI VOLE", "battle_cry": "Bismilah", "durability": -1, "damage": 35},
            "Charme": {"name": "Charme", "description": "L'amour est plus fort que tout", "battle_cry": "Mouah üíã", "durability": -1, "damage": 35},
            "Chant brutal": {"name": "Chant brutal", "description": "Pas mal d'Octaves dans la voix", "battle_cry": "D√®s que je chanterais tu deviendras sourd.", "durability": -1, "damage": 30},
            "Kamehameha": {"name": "Kamehameha", "description": "Pouvoir totalement originaire d'ici", "battle_cry": "Redonne mon couscous", "durability": -1, "damage": 30},
            "Malaka": {"name": "Malaka", "description": "Il fait chaud l√† bas", "battle_cry": "Mange mon grec", "durability": -1, "damage": 25},
            "Control Mental": {"name": "Control Mental", "description": "Contr√¥le seulement le petit doigt de l'adversaire", "battle_cry": "Au hazard", "durability": -1, "damage": 25},
            "Gear 5": {"name": "Gear 5", "description": "Pouvoir totalement cr√©er dans la for√™t des souflis", "battle_cry": "Youhouu", "durability": -1, "damage": 20},
            "Ultra tarte": {"name": "Ultra tarte", "description": "Une √©norm√© baffe", "battle_cry": "ET BIIIIIM", "durability": -1, "damage": 20},
            "Balayette laser": {"name": "Balayette laser", "description": "La gravit√© reste la force la plus faible des 4 que compose l'univers..", "battle_cry": "T√™te AU SOL", "durability": -1, "damage": 15},
            "Force de mouche": {"name": "Force de mouche", "description": "P'tit coup de pression", "battle_cry": "Attention √ßa va faire mal !!!", "durability": -1, "damage": 15},
            "Contre-argument": {"name": "Contre-argument", "description": "La violence ne r√©soud rien..", "battle_cry": "La violence verbale est la plus grande des violence..", "durability": -1, "damage": 10},
            "Marteau du Forain": {"name": "Marteau du Forain", "description": "Un marteau venant d'une des plus grandes forges roumaine de l'humanit√©", "battle_cry": "K√©vin abat son marteau avec fracas, d√©clenchant une onde de choc qui fait vibrer les miroirs autour de vous.", "durability": -1, "damage": 30},
            "Billes de Loterie Explosives": {"name": "Billes de Loterie Explosives", "description": "Des billes de fabrication chinoise..peut √™tre ?", "battle_cry": "Il lance une poign√©e de billes color√©es qui explosent en gerbes de lumi√®re aveuglante.", "durability": -1, "damage": 28},
            "Claque de la Poigne Gigantesque": {"name": "Claque de la Poigne Gigantesque", "description": "Une main qui m√©riterait d'√™tre un panneau stop", "battle_cry": "Il pr√©pare une claque charg√©e, des veines lumineuses pulsent sur la main, et un bruit sourd de tension monte dans l'air. L'impact cr√©e une onde de choc qui soul√®ve poussi√®re et d√©bris tout autour.", "durability": 1, "damage": 40},
            "Le Lasso de Soie": {"name": "Le Lasso de Soie", "description": "Anjalou utilise un lasso en soie fine, qu'il fait briller comme une √©toile. Il l'envoie avec √©l√©gance pour attraper ses ennemis et les ramener vers lui avec un mouvement fluide et gracieux.", "battle_cry": "TU M'ES ACCROCH√â‚Ä¶ ET J'AI UN CR√ÇNE √Ä PR√âSERVER !", "durability": -1, "damage": 30},
            "La Roulade du Gentleman": {"name": "La Roulade du Gentleman", "description": "Anjalou effectue une roulade parfaitement chor√©graphi√©e, √©vitant les attaques ennemies tout en d√©cochant un coup de pied agile, comme un ma√Ætre de danse.", "battle_cry": "UNE DANSE AU RYTHME DU STYLE !", "durability": -1, "damage": 35},
            "Le Vent du Chapeau": {"name": "Le Vent du Chapeau", "description": "Anjalou effectue un mouvement rapide, et son chapeau √©l√©gant se transforme en un projecteur de lumi√®re qui √©blouit temporairement les ennemis autour de lui.", "battle_cry": "MON STYLE, MA PUISSANCE !", "durability": -1, "damage": 40},
            "Le Cr√¢ne de Lumi√®re": {"name": "Le Cr√¢ne de Lumi√®re", "description": "Anjalou se tient droit, prend une pause pour s'assurer que son cr√¢ne est parfaitement poli, puis lib√®re une lumi√®re aveuglante depuis son cr√¢ne chauve, envoyant une onde d'√©nergie brillante dans toute la zone. L'onde d√©stabilise ses ennemis, tout en r√©tablissant l'√©clat de son apparence avec une touche de perfection.", "battle_cry": "VOUS NE POUVEZ PAS FAIRE CONCURRENCE AVEC LE CR√ÇNE DU MA√éTRE !", "durability": 1, "damage": 55},
            "Le Marteau de la Banque": {"name": "Le Marteau de la Banque", "description": "Mathieu fait appara√Ætre un √©norme marteau dor√© en forme de lingot et le balance violemment sur le sol, cr√©ant une onde de choc √©tincelante.", "battle_cry": "TA BOURSE NE VA PAS AIMER √áA !", "durability": -1, "damage": 70},
            "Le Lancer de Pi√®ce F√©tiche": {"name": "Le Lancer de Pi√®ce F√©tiche", "description": "Il saisit une pi√®ce dor√©e et la propulse √† une vitesse fulgurante, frappant l'ennemi directement entre les yeux.", "battle_cry": "C'EST √Ä MOI QUE TU LA DOIS, LA MONNAIE !", "durability": -1, "damage": 60},
            "Le Coup du Pantalon Tra√Ætre": {"name": "Le Coup du Pantalon Tra√Ætre", "description": "Mathieu arrache un pan de ses v√™tements et le fait tournoyer, cr√©ant un vent si puissant qu'il emporte ses adversaires.", "battle_cry": "CES FRINGUES NE SONT PAS JUSTE POUR LE STYLE !", "durability": -1, "damage": 50},
            "L'√âcran Noir de la Dette": {"name": "L'√âcran Noir de la Dette", "description": "Mathieu tend les bras, et un immense √©cran translucide appara√Æt au-dessus de l'ar√®ne, projetant une lumi√®re √©blouissante. Sur cet √©cran, une facture gigantesque s'affiche avec des chiffres astronomiques qui clignotent, plongeant ses ennemis dans une terreur indescriptible.", "battle_cry": "ET SI TU PAYAIS TES IMP√îTS ?!", "durability": 1, "damage": 100},
            "Low Kick du Kangourou": {"name": "Low Kick du Kangourou", "description": "Le tibia est une partie du corps tr√®s dure mais tr√®s sensible..", "battle_cry": "AYAAAH", "durability": -1, "damage": 100},
            "Bouclier du l√©murien": {"name": "Bouclier du l√©murien", "description": "Un bouclier venant tout droit du WAKANDA", "battle_cry": "WAKANDA POUR TOUJOURSSS!!!", "durability": -1, "damage": 120},
            "D√©ferlante de la jungle": {"name": "D√©ferlante de la jungle", "description": "Une bonne temp√™te tropicale comme on les aime..", "battle_cry": "Un brin d'air !", "durability": 1, "damage": 150},
            "Coup du Lotus Bris√©": {"name": "Coup du Lotus Bris√©", "description": "Un coup puissant et cibl√©, imitant l'√©closion brutale d'un lotus.", "battle_cry": "Repose en paix...", "durability": -1, "damage": 350},
            "Sillage d'Encens": {"name": "Sillage d'Encens", "description": "Une s√©rie de mouvements fluides lib√©rant une fum√©e toxique qui entrave les adversaires.", "battle_cry": "Fumer tue.", "durability": -1, "damage": 250},
            "Col√®re des 1000 √Çmes": {"name": "Col√®re des 1000 √Çmes", "description": "Le boss invoque les esprits des moines qui l'entourent pour d√©cha√Æner une temp√™te spirituelle d√©vastatrice.", "battle_cry": "TOUS TES MORTS SONT CONTRE TOI !", "durability": 1, "damage": 500},
            "Attaque l√©g√®re" : {"name" : "Attaque l√©g√®re", "description": "Attaque de base rapide et pr√©√ßise", "battle_cry": "Ah c'est l√©geeeeeeer", "durability": -1, "damage": 10},
            "Attaque lourde" : {"name": "Attaque lourde", "description": "Attaque de base lourde", "battle_cry": "Ah c'est Louuuuuuurd", "durability": 2, "damage": 20},
            "Le cheat de Loic" : {"name": "Le cheat de Loic", "description": "/kill, pas le temps, faut corriger...", "battle_cry": "FAUT QUE JE CORRIGE VITE... HETIFICATION !!", "durability": -1, "damage": 486486486486}
        }

        self.items = {
            "Cl√© du casino": {"name": "Cl√© du casino", "description": "Cette cl√© t'aidera √† acc√©der au boss final !", "effect": {}},
            "Cl√© de la f√™te foraine": {"name": "Cl√© de la f√™te foraine", "description": "Cette cl√© t'aidera √† acc√©der au boss final !", "effect": {}},
            "Cl√© du temple": {"name": "Cl√© du temple", "description": "Cette cl√© t'aidera √† acc√©der au boss final !", "effect": {}},
            "Cl√© du Domaine": {"name": "Cl√© du Domaine", "description": "Cette cl√© t'aidera √† acc√©der au boss final !", "effect": {}},
            "Petite potion rouge": {"name": "Petite potion rouge", "description": "Potion donn√©e par la d√©esse Ga√Øa (soigne 20 PV)", "effect": {"health": 20}},
            "Grande potion rouge": {"name": "Grande potion rouge", "description": "Potion donn√©e par la d√©esse Ga√Øa (soigne 50 PV)", "effect": {"health": 50}},
            "Potion de vie": {"name": "Potion de vie", "description": "Une potion qui soigne 100 PV", "effect": {"health": 100}},
            "Potion de r√©g√©n√©ration": {"name": "Potion de r√©g√©n√©ration", "description": "Une potion qui soigne 200 PV", "effect": {"health": 200}},
            "Potion divine": {"name": "Potion divine", "description": "Une potion qui soigne compl√®tement les PV", "effect": {"health": 9999}}
        }

        self.artefact = {
            "Petit canard": {"name": "Petit canard", "description": "Augmente l'HP. Parce que rien ne vaut un bon bain avec un canard en plastique.", "effect": {"health": 50, "attack": 0, "defense": 0}},
            "√âcran du Mac": {"name": "√âcran du Mac", "description": "Utilis√© comme bouclier, c'est le fameux √©cran du Mac de Mathieu. Attention aux pixels morts !", "effect": {"health": 0, "attack": 0, "defense": 20}},
            "Maxi Ph√¥ Boeuf": {"name": "Maxi Ph√¥ Boeuf", "description": "Une soupe de nouille dont la recette est rest√©e secr√®te depuis hier. Un vrai coup de boost pour les guerriers affam√©s.", "effect": {"health": 0, "attack": 200, "defense": 0}},
            "Jeu de cartes": {"name": "Jeu de cartes", "description": "Jeu de carte truqu√©. Parfait pour les soir√©es poker entre amis... ou pour tricher en combat.", "effect": {"health": 0, "attack": 0, "defense": 100}}
        }

        self.monsters = {
            "Amelie": {
            "name": "Amelie",
            "description": "Une cr√©ature myst√©rieuse avec une aura envo√ªtante.",
            "level": 2,
            "attack_list": [
                Attack(**self.attacks["Force de mouche"], drop_rate=5),
                Attack(**self.attacks["Contre-argument"], drop_rate=5)
            ],
            "dropable_items": [
                Consomable(**self.items["Petite potion rouge"], drop_rate=25),
                Consomable(**self.items["Grande potion rouge"], drop_rate=20),
                Consomable(**self.items["Potion de vie"], drop_rate=3),
                Consomable(**self.items["Potion de r√©g√©n√©ration"], drop_rate=2),
                Consomable(**self.items["Potion divine"], drop_rate=1)
            ],
            "boss": False
            },
            "Fara": {
            "name": "Fara",
            "description": "Un guerrier redoutable avec une force brute.",
            "level": 4,
            "attack_list": [
                Attack(**self.attacks["Ultra tarte"], drop_rate=5),
                Attack(**self.attacks["Balayette laser"], drop_rate=5)
            ],
            "dropable_items": [
                Consomable(**self.items["Petite potion rouge"], drop_rate=25),
                Consomable(**self.items["Grande potion rouge"], drop_rate=20),
                Consomable(**self.items["Potion de vie"], drop_rate=3),
                Consomable(**self.items["Potion de r√©g√©n√©ration"], drop_rate=2),
                Consomable(**self.items["Potion divine"], drop_rate=1)
            ],
            "boss": False
            },
            "Imen": {
            "name": "Imen",
            "description": "Un mage puissant ma√Ætrisant les arts mystiques.",
            "level": 6,
            "attack_list": [
                Attack(**self.attacks["Control Mental"], drop_rate=4),
                Attack(**self.attacks["Gear 5"], drop_rate=4)
            ],
            "dropable_items": [
                Consomable(**self.items["Petite potion rouge"], drop_rate=25),
                Consomable(**self.items["Grande potion rouge"], drop_rate=20),
                Consomable(**self.items["Potion de vie"], drop_rate=6),
                Consomable(**self.items["Potion de r√©g√©n√©ration"], drop_rate=2),
                Consomable(**self.items["Potion divine"], drop_rate=1)
            ],
            "boss": False
            },
            "Nazim": {
            "name": "Nazim",
            "description": "Un combattant agile et rapide comme l'√©clair.",
            "level": 8,
            "attack_list": [
                Attack(**self.attacks["Kamehameha"], drop_rate=3),
                Attack(**self.attacks["Malaka"], drop_rate=3)
            ],
            "dropable_items": [
                Consomable(**self.items["Petite potion rouge"], drop_rate=15),
                Consomable(**self.items["Grande potion rouge"], drop_rate=25),
                Consomable(**self.items["Potion de vie"], drop_rate=10),
                Consomable(**self.items["Potion de r√©g√©n√©ration"], drop_rate=5),
                Consomable(**self.items["Potion divine"], drop_rate=2)
                ],
            "boss": False
            },
            "Nana la renarde": {
            "name": "Nana la renarde",
            "description": "Une renarde rus√©e avec des charmes envo√ªtants.",
            "level": 10,
            "attack_list": [
                Attack(**self.attacks["Charme"], drop_rate=3),
                Attack(**self.attacks["Chant brutal"], drop_rate=3)
            ],
            "dropable_items": [
                Consomable(**self.items["Petite potion rouge"], drop_rate=15),
                Consomable(**self.items["Grande potion rouge"], drop_rate=35),
                Consomable(**self.items["Potion de vie"], drop_rate=13),
                Consomable(**self.items["Potion de r√©g√©n√©ration"], drop_rate=8),
                Consomable(**self.items["Potion divine"], drop_rate=3)
            ],
            "boss": False
            },
            "Youva": {
            "name": "Youva",
            "description": "Un guerrier explosif avec une vitesse fulgurante.",
            "level": 12,
            "attack_list": [
                Attack(**self.attacks["Explosion"], drop_rate=2),
                Attack(**self.attacks["Vol rapide"], drop_rate=2)
            ],
            "dropable_items": [
                Consomable(**self.items["Petite potion rouge"], drop_rate=15),
                Consomable(**self.items["Grande potion rouge"], drop_rate=35),
                Consomable(**self.items["Potion de vie"], drop_rate=13),
                Consomable(**self.items["Potion de r√©g√©n√©ration"], drop_rate=8),
                Consomable(**self.items["Potion divine"], drop_rate=3)
            ],
            "boss": False
            },
            "Carglass": {
            "name": "Carglass",
            "description": "Un monstre robuste avec des griffes ac√©r√©es.",
            "level": 14,
            "attack_list": [
                Attack(**self.attacks["Lanc√© de talon"], drop_rate=2),
                Attack(**self.attacks["Griffure"], drop_rate=2)
            ],
            "dropable_items": [
                Consomable(**self.items["Petite potion rouge"], drop_rate=15),
                Consomable(**self.items["Grande potion rouge"], drop_rate=25),
                Consomable(**self.items["Potion de vie"], drop_rate=15),
                Consomable(**self.items["Potion de r√©g√©n√©ration"], drop_rate=8),
                Consomable(**self.items["Potion divine"], drop_rate=3)
            ],
            "boss": False
            },
            "Cherif": {
            "name": "Cherif",
            "description": "Un guerrier redoutable avec des attaques √©lectriques.",
            "level": 16,
            "attack_list": [
                Attack(**self.attacks["Coup de tonerre"], drop_rate=2),
                Attack(**self.attacks["Grattage du d√©l√©gu√©"], drop_rate=2)
            ],
            "dropable_items": [
                Consomable(**self.items["Petite potion rouge"], drop_rate=15),
                Consomable(**self.items["Grande potion rouge"], drop_rate=25),
                Consomable(**self.items["Potion de vie"], drop_rate=20),
                Consomable(**self.items["Potion de r√©g√©n√©ration"], drop_rate=8),
                Consomable(**self.items["Potion divine"], drop_rate=3)
            ],
            "boss": False
            },
            "Noa": {
            "name": "Noa",
            "description": "Un judoka puissant avec des poings enflamm√©s.",
            "level": 18,
            "attack_list": [
                Attack(**self.attacks["Souplesse du judoka"], drop_rate=2),
                Attack(**self.attacks["Poing de feu"], drop_rate=2)
            ],
            "dropable_items": [                   
                Consomable(**self.items["Petite potion rouge"], drop_rate=15),
                Consomable(**self.items["Grande potion rouge"], drop_rate=15),
                Consomable(**self.items["Potion de vie"], drop_rate=10),
                Consomable(**self.items["Potion de r√©g√©n√©ration"], drop_rate=15),
                Consomable(**self.items["Potion divine"], drop_rate=5)
            ],
            "boss": False
            },
            "Hamid": {
            "name": "Hamid",
            "description": "Un guerrier forestier avec une vitesse incroyable.",
            "level": 20,
            "attack_list": [
                Attack(**self.attacks["Bois de boulogne"], drop_rate=2),
                Attack(**self.attacks["Course rapide"], drop_rate=2)
            ],
            "dropable_items": [
                
                Consomable(**self.items["Petite potion rouge"], drop_rate=15),
                Consomable(**self.items["Grande potion rouge"], drop_rate=15),
                Consomable(**self.items["Potion de vie"], drop_rate=10),
                Consomable(**self.items["Potion de r√©g√©n√©ration"], drop_rate=20),
                Consomable(**self.items["Potion divine"], drop_rate=10)
            ],
            "boss": False
            },
            "Kevin": {
            "name": "Kevin",
            "description": "Souverain des rires perdus, ma√Ætre des illusions.",
            "level": 5,
            "attack_list": [
                Attack(**self.attacks["Marteau du Forain"], drop_rate=10),
                Attack(**self.attacks["Billes de Loterie Explosives"], drop_rate=10),
                Attack(**self.attacks["Claque de la Poigne Gigantesque"], drop_rate=10)
            ],
            "dropable_items": [(Item(**self.items["Cl√© de la f√™te foraine"], drop_rate=100)),Equipable(**self.artefact["Petit canard"])],
            "boss": True
            },
            "Anjalou": {
            "name": "Anjalou",
            "description": "Fils du Roi Singe, √©l√©gant et redoutable.",
            "level": 10,
            "attack_list": [
                Attack(**self.attacks["Le Lasso de Soie"], drop_rate=10),
                Attack(**self.attacks["La Roulade du Gentleman"], drop_rate=10),
                Attack(**self.attacks["Le Vent du Chapeau"], drop_rate=10),
                Attack(**self.attacks["Le Cr√¢ne de Lumi√®re"], drop_rate=10)
            ],
            "dropable_items": [],
            "boss": True
            },
            "Mathieu": {
            "name": "Mathieu",
            "description": "Riche investisseur avec des attaques d√©vastatrices.",
            "level": 15,
            "attack_list": [
                Attack(**self.attacks["Le Marteau de la Banque"], drop_rate=10),
                Attack(**self.attacks["Le Lancer de Pi√®ce F√©tiche"], drop_rate=10),
                Attack(**self.attacks["Le Coup du Pantalon Tra√Ætre"], drop_rate=10),
                Attack(**self.attacks["L'√âcran Noir de la Dette"], drop_rate=10)
            ],
            "dropable_items": [(Item(**self.items["Cl√© du Domaine"], drop_rate=100)), Equipable(**self.artefact["√âcran du Mac"])],
            "boss": True
            },
            "Le Roi Singe": {
            "name": "Le Roi Singe",
            "description": "Dirigeant de la confr√©rie singeresque, puissant et sage.",
            "level": 20,
            "attack_list": [
                Attack(**self.attacks["Low Kick du Kangourou"], drop_rate=10),
                Attack(**self.attacks["Bouclier du l√©murien"], drop_rate=10),
                Attack(**self.attacks["D√©ferlante de la jungle"], drop_rate=10)
            ],
            "dropable_items": [(Item(**self.items["Cl√© du casino"], drop_rate=100)), Equipable(**self.artefact["Jeu de cartes"])],
            "boss": True
            },
            "Lao-ren": {
            "name": "Lao-ren",
            "description": "Ma√Ætre Shaolin, gardien du temple sacr√©.",
            "level": 25,
            "attack_list": [
                Attack(**self.attacks["Coup du Lotus Bris√©"], drop_rate=10),
                Attack(**self.attacks["Sillage d'Encens"], drop_rate=10),
                Attack(**self.attacks["Col√®re des 1000 √Çmes"], drop_rate=10)
            ],
            "dropable_items": [(Item(**self.items["Cl√© du temple"], drop_rate=100)), Equipable(**self.artefact["Maxi Ph√¥ Boeuf"])],
            "boss": True
            },
          "Alexandre": {
              "name": "Alexandre",
              "description": "Directeur d'HETIC, strat√®ge redoutable.",
              "level": 30,
              "attack_list": [
              Attack(**self.attacks["Coup du Lotus Bris√©"], drop_rate=10),
              Attack(**self.attacks["Sillage d'Encens"], drop_rate=10),
              Attack(**self.attacks["Col√®re des 1000 √Çmes"], drop_rate=10)
              ],
            "dropable_items": [],
            "boss": True
          },
          "Nabil": {
              "name": "Nabil",
              "description": "Le porte-parole, manipulateur et puissant.",
              "level": 35,
              "attack_list": [
              Attack(**self.attacks["Coup du Lotus Bris√©"], drop_rate=10),
              Attack(**self.attacks["Sillage d'Encens"], drop_rate=10),
              Attack(**self.attacks["Col√®re des 1000 √Çmes"], drop_rate=10)
              ],
            "dropable_items": [],
            "boss": True
          }
        }




    def start(self):
        """
        D√©marre le jeu en cr√©ant le joueur principal et en initiant la premi√®re interaction.
        """
        console.print("[green]Cr√©ation du personnage...[/green]")
        player_name = Prompt.ask("Quel nom souhaitez-vous donner √† votre personnage ? (si vous √™tes Loic, veuillez √©crire \"Loic\")", default="Joueur")
        system("clear")
        if player_name == "Loic":
            self.main_player = Player(
                name=player_name,
                level=10,
                xp=0,
                attack_list=[Attack(**self.attacks["Attaque l√©g√®re"]), Attack(**self.attacks["Col√®re des 1000 √Çmes"]),Attack(**self.attacks["Le cheat de Loic"])],
                place= self.places["Spawn"],
                inventory=[Item(**self.items["Cl√© du casino"]), Item(**self.items["Cl√© de la f√™te foraine"]), Item(**self.items["Cl√© du temple"]), Item(**self.items["Cl√© du Domaine"])],
            )
        else:
            self.main_player = Player(
                name=player_name,
                level=1,
                xp=0,
                attack_list=[Attack(**self.attacks["Attaque l√©g√®re"]), Attack(**self.attacks["Attaque lourde"])],
                place= self.places["Spawn"],
                inventory=[],
            )
        console.print(f"[bold blue]Bienvenue dans {self.name}[/bold blue]")
        self.main_player.place.interact(self.main_player)

    def end(self):
        """
        Termine le jeu en affichant un message de fin.
        """
        console.print("[bold green]Merci d'avoir jou√© ![/bold green]")

class Entity:
    """
    Repr√©sente une entit√© g√©n√©rique dans le jeu.
    """
    def __init__(self, name: str, description: str, level: int, xp: float, stats: dict, attack_list: list) :
        """
        Initialise une entit√© avec des attributs de base.
        
        Args:
            name (str): Le nom de l'entit√©.
            description (str): Une description de l'entit√©.
            level (int): Le niveau de l'entit√©.
            xp (float): Les points d'exp√©rience de l'entit√©.
            stats (dict): Les statistiques de l'entit√©.
            attack_list (list): La liste des attaques que l'entit√© peut effectuer.
        """
        self.name = name
        self.description = description
        self.level = level
        self.xp = xp
        self.stat = stats or {"health" : 100, "attack": 10, "defense": 5}
        self.max_hp = self.stat["health"]
        self.attack_list = attack_list or []

    def attack(self, target) -> str:
        """
        Effectue une attaque sur la cible.
        
        Args:
            target (Entity): L'entit√© cible √† attaquer.
        
        Returns:
            str: Le r√©sultat de l'attaque.
        """
        if not self.attack_list:
            return f"{self.name} n'a aucune attaque disponible"

        attack_chosen = None
        if type(target) is Player:
            attack_chosen = random.choice(self.attack_list)
        elif type(target) is Monster:
            choices = "\n".join([f"{i} - {attack.name} : {attack.damage + self.stat["attack"]}" for i, attack in enumerate(self.attack_list)])
            attack_chosen = self.attack_list[int(Prompt.ask(f"Choisissez votre attaque :\n{choices}\n", choices=[str(i) for i in range(len(self.attack_list))]))]

        if attack_chosen.durability > 0 or attack_chosen.max_durability == -1:
            dialog.naration(f"{self.name} utilise {attack_chosen.name}. \"{attack_chosen.battle_cry}\"")
            damage = max(attack_chosen.damage + self.stat["attack"] - target.stat["defense"], 0)
            target.change_stats(-damage, "health")
            if attack_chosen.max_durability != -1:
                attack_chosen.durability -= 1
        else:
            dialog.naration(f"{self.name} n'a plus de durabilit√© pour {attack_chosen.name}")
            return self.attack(target)

    def change_stats(self, amount: int, damage_type: str) -> None:
        """
        Modifie les statistiques de l'entit√©.
        
        Args:
            amount (int): Le montant de la modification de la statistique.
            damage_type (str): Le type de statistique √† modifier (health, attack, defense).
        """
        if damage_type == "health" :
            new_health = max(self.stat["health"] + amount, 0)
            if new_health > self.max_hp:
                new_health = self.max_hp

            if amount < 0:
                dialog.naration(f"La sant√© de {self.name} descend de {-amount} ({self.stat['health']} -> {new_health})")
            else:
                dialog.naration(f"La sant√© de {self.name} augmente de {amount} ({self.stat['health']} -> {new_health})")
            
            self.stat["health"] = new_health

        elif damage_type == "attack" :
            new_attack = max(self.stat["attack"] + amount, 0)
            
            if amount < 0:
                dialog.naration(f"L'attaque de {self.name} descend de {-amount} ({self.stat['attack']} -> {new_attack})")
            else:
                dialog.naration(f"L'attaque de {self.name} augmente de {amount} ({self.stat['attack']} -> {new_attack})")
            
            self.stat["attack"] = new_attack
        elif damage_type == "defense" :
            new_defense = max(self.stat["defense"] + amount, 0)
            
            if amount < 0:
                dialog.naration(f"La d√©fense de {self.name} descend de {-amount} ({self.stat['defense']} -> {new_defense})")
            else:
                dialog.naration(f"La d√©fense de {self.name} augmente de {amount} ({self.stat['defense']} -> {new_defense})")
            
            self.stat["defense"] = new_defense

class Monster(Entity):
    """
    Repr√©sente un monstre dans le jeu.
    """
    def __init__(self, name: str, description: str, level: int, attack_list: list, dropable_items: list, boss: bool = False):
        """
        Initialise un monstre avec des attributs sp√©cifiques.
        
        Args:
            name (str): Le nom du monstre.
            description (str): Une description du monstre.
            level (int): Le niveau du monstre.
            attack_list (list): La liste des attaques que le monstre peut effectuer.
            dropable_items (list): La liste des objets que le monstre peut laisser tomber.
            boss (bool): Indique si le monstre est un boss ou non.
        """
        stats = {
            "health": 50 + 20 * level,
            "attack": 5 + 2 * level,
            "defense": 3 + 1 * level
        } if not boss else {
            "health": 200 + 100 * level,
            "attack": 20 + 10 * level,
            "defense": 10 + 5 * level
        }

        super().__init__(name, description, level, 0, stats, attack_list)
        self.dropable_items = dropable_items

    def calculate_drops(self):
        """
        Calcule les objets laiss√©s tomber par le monstre.
        
        Returns:
            list: La liste des objets laiss√©s tomber.
        """
        dropped_items = []
        for item in self.dropable_items:
            if random.randint(0, 100) <= item.drop_rate:
                dropped_items.append(item)
        return dropped_items

class Player(Entity):
    """
    Repr√©sente un joueur dans le jeu.
    """
    def __init__(self, name: str, level: int, xp: float, attack_list: list, place, inventory: list = [], equipped_items: list = []):
        """
        Initialise un joueur avec des attributs sp√©cifiques.
        
        Args:
            name (str): Le nom du joueur.
            level (int): Le niveau du joueur.
            xp (float): Les points d'exp√©rience du joueur.
            stats (dict): Les statistiques du joueur.
            attack_list (list): La liste des attaques que le joueur peut effectuer.
            place (Place): Le lieu actuel du joueur.
            inventory (list): L'inventaire du joueur.
            equipped_items (list): La liste des objets √©quip√©s du joueur.
        """
        stats = {
            "health": 100 + 20 * level,
            "attack": 10 + 2 * level,
            "defense": 5 + 1 * level
        }
        super().__init__(name, "", level, xp, stats, attack_list)
        self.inventory = inventory
        self.place = place
        self.equipped_items = equipped_items

    def use_item(self, item_index):
        """
        Utilise un objet de l'inventaire.
        
        Args:
            item_index (int): L'index de l'objet √† utiliser.
        
        Returns:
            bool: Indique si l'objet a √©t√© utilis√© avec succ√®s ou non.
        """
        if 0 <= item_index < len(self.inventory):
            item = self.inventory[item_index]
            if hasattr(item, "use"):
                item.use(self)
                self.inventory.pop(item_index)
                dialog.naration(f"{self.name} utilise {item.name}")
                return True
            else:
                dialog.naration(f"Vous ne pouvez pas utiliser {item.name} sur vous")
                return False
        else:
            dialog.naration(f"L'item √† l'index {item_index} n'est pas dans votre inventaire.")
            return False

    def equip_item(self, item_index):
        """
        √âquipe un objet de l'inventaire.
        
        Args:
            item_index (int): L'index de l'objet √† √©quiper.
        
        Returns:
            bool: Indique si l'objet a √©t√© √©quip√© avec succ√®s ou non.
        """
        if 0 <= item_index < len(self.inventory):
            item = self.inventory[item_index]
            if isinstance(item, Equipable):
                if len(self.equipped_items) < 3:
                    item.equip(self)
                    self.equipped_items.append(item)
                    dialog.naration(f"{self.name} a √©quip√© {item.name} !")
                else:
                    dialog.naration("Vous avez d√©j√† 3 items √©quip√©s. Choisissez celui que vous voulez remplacer :")
                    choices = [f"{i} - {equipped_items.name}" for i, equipped_items in enumerate(self.equipped_items)]
                    choices.append("back - Ne pas remplacer")
                    choice = Prompt.ask(f"Choisissez un item √† remplacer :\n{'\n'.join(choices)}", choices=[str(i) for i in range(len(self.equipped_items))] + ["back"])

                    if choice != "back":
                        self.equipped_items[int(choice)].unequip(self)
                        self.equipped_items[int(choice)] = item
                        item.equip(self)
                        dialog.naration(f"Vous avez remplac√© un item par : {item.name}")
            else:
                dialog.naration(f"{item.name} ne peut pas √™tre √©quip√©")
                return False
        else:
            dialog.naration(f"L'item √† l'index {item_index} n'est pas dans votre inventaire.")
            return False
    
    def add_item_to_inventory(self, item):
        """
        Ajoute un objet √† l'inventaire du joueur.
        
        Args:
            item (Item): L'objet √† ajouter.
        """
        self.inventory.append(item)
        dialog.naration(f"{self.name} a obtenu {item.name}")

    def interact_with_inventory(self, combat_mode=False):
        """
        Interagit avec l'inventaire du joueur.
        
        Args:
            combat_mode (bool): Indique si l'interaction se fait pendant un combat ou non.
        
        Returns:
            bool: Indique si l'interaction a √©t√© r√©ussie ou non.
        """
        choices = [str(index) for index, item in enumerate(self.inventory)]
        choices.append("back")
        item_choice = Prompt.ask(f"Choisissez un item avec lequel int√©ragir :\n{'\n'.join([f'{index} - {item.name} : {item.description}' for index, item in enumerate(self.inventory)])}\nback - Revenir en arri√®re", choices=choices)

        if item_choice == "back":
            return False
        else:
            if combat_mode:
                return self.use_item(int(item_choice))
            else:
                action_choice = Prompt.ask("Voulez-vous consommer ou √©quiper cet item ?\n1 - Consommer\n2 - √âquiper\nback - Revenir en arri√®re", choices=["1", "2", "back"])
                if action_choice == "1":
                    return self.use_item(int(item_choice))
                elif action_choice == "2":
                    return self.equip_item(int(item_choice))

    def add_xp(self, amount: float):
        """
        Ajoute des points d'exp√©rience au joueur.
        
        Args:
            amount (float): La quantit√© de points d'exp√©rience √† ajouter.
        """
        self.xp += amount
        while self.xp >= self.xp_calculation_to_level_up():
            self.xp -= self.xp_calculation_to_level_up()
            self.level_up()

    def xp_calculation_to_level_up(self):
        """
        Calcule le seuil de points d'exp√©rience pour monter de niveau.
        
        Returns:
            float: Le seuil de points d'exp√©rience.
        """
        base_xp = 100
        growth_rate = 1.5
        return base_xp * (growth_rate ** (self.level - 1))

    def level_up(self):
        """
        Fait monter le joueur de niveau et augmente ses statistiques.
        """
        self.level += 1
        dialog.naration(f"Vous venez de passer au niveau {self.level} !")
        level_up_stats_text = []
        for stat, value in self.stat.items():
            increase = int(value * 0.2) if stat != "health" else int(self.max_hp * 0.2)
            new_stat_value = value + increase if stat != "health" else self.max_hp + increase
            level_up_stats_text.append(f"{stat.capitalize()} : {self.stat[stat]} -> {new_stat_value}")
            self.stat[stat] = new_stat_value
        dialog.naration("\n".join(level_up_stats_text))

        self.max_hp = self.stat["health"]

    def gain_attack(self, new_attack):
        """
        Ajoute une nouvelle attaque √† la liste des attaques du joueur.
        
        Args:
            new_attack (Attack): La nouvelle attaque √† ajouter.
        """
        if len(self.attack_list) < 3:
            self.attack_list.append(new_attack)
            dialog.naration(f"Vous avez appris une nouvelle attaque : {new_attack.name}")
        else:
            choices = [f"{index} - {attack.name} : {attack.description}" for index, attack in enumerate(self.attack_list)]
            choices.append("back - Ne pas remplacer")
            choice = Prompt.ask(f"Vous avez d√©j√† 3 attaques. Choisissez une attaque √† remplacer :\n{'\n'.join(choices)}\n", choices=[str(i) for i in range(len(self.attack_list))] + ["back"])

            if choice != "back":
                self.attack_list[int(choice)] = new_attack
                dialog.naration(f"Vous avez remplac√© une attaque par : {new_attack.name}")

    def move(self, place):
        """
        D√©place le joueur vers un nouveau lieu.
        
        Args:
            place (Place): Le nouveau lieu vers lequel se d√©placer.
        """
        dialog.place_changement(place.name)
        self.place = place
        self.place.interact(self)

    def display_stats(self):
        """
        Affiche les statistiques du joueur.
        """
        console.print(f"Niveau: {self.level}\nSant√©: {self.stat['health']}/{self.max_hp}\nAttaque: {self.stat['attack']}\nD√©fense: {self.stat['defense']}\n\n")

class Place:
    """
    Repr√©sente un lieu dans le jeu.
    """
    def __init__(self, name: str, description: str, monsters: list, interaction=None, places_around=None):
        """
        Initialise un lieu avec des attributs sp√©cifiques.
        
        Args:
            name (str): Le nom du lieu.
            description (str): Une description du lieu.
            monsters (list): La liste des monstres dans le lieu.
            interaction (function): La fonction d'interaction pour le lieu.
            places_around (dict): Les lieux autour de ce lieu.
        """
        self.name = name
        self.description = description
        self.places_around = places_around or {}
        self.monsters = monsters
        self.exploration = False
        self.interaction = interaction or {}

    def interact(self, player):
        """
        Interagit avec le joueur dans le lieu.
        
        Args:
            player (Player): Le joueur avec lequel interagir.
        """
        player.display_stats()
        self.interaction(self)

class Combat:
    """
    Repr√©sente un combat entre un joueur et un adversaire.
    """
    def __init__(self, player, opponent):
        """
        Initialise un combat avec un joueur et un adversaire.
        
        Args:
            player (Player): Le joueur dans le combat.
            opponent (Monster): L'adversaire dans le combat.
        """
        self.turn_number = 0
        self.player = player
        self.opponent = opponent
        self.status = "Combat" #Fuite pour s'enfuire
        self.active_player = random.randint(0, 1) # 0 = Player /  1 = Monster // D√©termine celui qui commence en premier

    #D√©but du combat
    def start(self):
        """
        D√©marre le combat.
        """
        dialog.naration(f"Vous vous appr√™tez √† vous battre contre {self.opponent.name}...\nQUE LE COMBAT COMMENCE !")
        system("clear")

        while self.player.stat["health"] > 0 and self.opponent.stat["health"] > 0:
            dialog.naration(f"{self.player.name} a {self.player.stat['health']} PV.\n{self.opponent.name} a {self.opponent.stat['health']} PV.")
            self.turn()

            if self.status == "Fuite":
                break

        self.end()

    #Alternateur de tours
    def turn(self):
        """
        Alterne les tours entre le joueur et l'adversaire.
        """
        if self.active_player == 0:
            self.player_turn()
        else:
            self.opponent_turn()

        self.active_player = 1 - self.active_player
        self.turn_number += 1

    #Tour du PLayer
    def player_turn(self):
        """
        Ex√©cute le tour du joueur.
        """
        action = Prompt.ask("Choisissez une action\n1 - Attaquer\n2 - Inventaire\n3 - Fuir", choices=["1", "2", "3"])

        if action == '1':
            return self.player.attack(self.opponent)
        elif action == '2':
            if not self.player.interact_with_inventory(combat_mode=True):
                return self.player_turn()
        elif action == '3':
            self.status = "Fuite"
            return "Vous avez r√©ussi √† vous enfuir !"

    #Tour de l'adversaire
    def opponent_turn(self):
        """
        Ex√©cute le tour de l'adversaire.
        """
        #Appel de la m√©thode self.attack de la class Entity
        return self.opponent.attack(self.player)

    #Fin du combat
    def end(self):
        """
        Termine le combat et g√®re le r√©sultat.
        """
        #Si l'adversaire est √† 0 PV
        if self.opponent.stat["health"] <= 0 :
            #Drop du monstre, dropable_items = la liste des drops du monstre / Appel de la m√©thode self.calculate_drops de la class Entity
            drop_items = []
            if self.opponent.dropable_items:

                drop_items = self.opponent.calculate_drops()
                for item in drop_items:
                    self.player.add_item_to_inventory(item)

            amount_xp = 20 * self.opponent.level

            dialog.naration(f"Le combat est termin√© !\nVous avez vaincu {self.opponent.name} et gagn√© {amount_xp} XP.\nIl vous manque {self.player.xp_calculation_to_level_up() - self.player.xp} XP pour monter de niveau.")

            self.player.add_xp(amount_xp)
            self.handle_attack_drops()
            self.reset_attack_durability()
            return True

        #Si le Player est √† 0 PV
        elif self.player.stat["health"] <= 0 :

            #Le player perd le combat, retour √† la base
            dialog.naration("Vous avez √©t√© vaincu comme un Looser que vous √™tes ! Vous retournez au spawn bredouille !")
            self.player.stat["health"] = self.player.max_hp
            self.reset_attack_durability()
            return False

        #Le joueur s'enfuit du combat
        else:
            dialog.naration("Vous avez r√©ussi √† vous enfuir !")
            self.reset_attack_durability()
            return False
            # PEUT ETRE TP AU SPAWN

    def reset_attack_durability(self):
        # Reset la durabilit√© de l'attaque
        for attack in self.player.attack_list:
            if attack.max_durability != -1:
                attack.durability = attack.max_durability

    def handle_attack_drops(self):
        """
        G√®re les attaques laiss√©es tomber par l'adversaire.
        """
        dropped_attacks = []
        for attack in self.opponent.attack_list:
            if random.randint(0, 100) <= attack.drop_rate:
                dropped_attacks.append(attack)
        if dropped_attacks:
            dialog.naration("Vous avez la possibilit√© d'apprendre de nouvelles attaques :")
            for attack in dropped_attacks:
                choice = Prompt.ask(f"Voulez-vous apprendre l'attaque {attack.name} ?", choices=["oui", "non"])
                if choice == "oui":
                    self.player.gain_attack(attack)

class Item:
    """
    Repr√©sente un objet dans le jeu.
    """
    def __init__(self, name: str, description: str, effect: dict, drop_rate:int = 100):
        """
        Initialise un objet avec des attributs sp√©cifiques.
        
        Args:
            name (str): Le nom de l'objet.
            description (str): Une description de l'objet.
            effect (dict): L'effet de l'objet.
            drop_rate (int): Le taux de drop de l'objet.
        """
        self.name = name
        self.description = description
        self.drop_rate = drop_rate
        self.effect = effect
        effect = {
            "health": 10
        }
        effect = {
            "attack": 10,
            "defense": 10
        }
    def __repr__(self):
        return self.name

class Equipable(Item):
    """
    Repr√©sente un objet √©quipable dans le jeu.
    """
    def __init__(self, name: str, description: str, effect: dict, drop_rate:int=100):
        """
        Initialise un objet √©quipable avec des attributs sp√©cifiques.
        
        Args:
            name (str): Le nom de l'objet.
            description (str): Une description de l'objet.
            effect (dict): L'effet de l'objet.
            drop_rate (int): Le taux de drop de l'objet.
        """
        super().__init__(name, description, effect, drop_rate)
        self.equipped = False

    def equip(self, target):
        """
        √âquipe l'objet √† la cible.
        
        Args:
            target (Entity): La cible √† √©quiper.
        """
        if not self.equipped:
            for stat, value in self.effect.items():
                if stat == "health":
                    target.max_hp += value
                target.stat[stat] += value
            self.equipped = True
            dialog.naration(f"{self.name} est maintenant √©quip√© !")
        else:
            dialog.naration(f"{self.name} est d√©j√† √©quip√©.")

    def unequip(self, target):
        """
        D√©s√©quipe l'objet de la cible.
        
        Args:
            target (Entity): La cible √† d√©s√©quiper.
        """
        if self.equipped:
            for stat, value in self.effect.items():
                if stat == "health":
                    target.max_hp -= value
                target.stat[stat] -= value
            self.equipped = False
            dialog.naration(f"{self.name} a √©t√© d√©s√©quip√©.")

class Consomable(Item):
    """
    Repr√©sente un objet consommable dans le jeu.
    """
    def __init__(self, name: str, description: str, effect: dict, drop_rate:int=100):
        """
        Initialise un objet consommable avec des attributs sp√©cifiques.
        
        Args:
            name (str): Le nom de l'objet.
            description (str): Une description de l'objet.
            effect (dict): L'effet de l'objet.
            drop_rate (int): Le taux de drop de l'objet.
        """
        super().__init__(name, description, effect, drop_rate)
        self.active = False

    def use(self, target):
        """
        Utilise l'objet consommable sur la cible.
        
        Args:
            target (Entity): La cible sur laquelle utiliser l'objet.
        """
        for stat, value in self.effect.items():
            if stat in target.stat:
                target.change_stats(value, stat)

class Attack:
    """
    Repr√©sente une attaque dans le jeu.
    """
    def __init__(self, name: str, description: str, battle_cry: str, durability: int, damage: int, drop_rate:int = 100):
        """
        Initialise une attaque avec des attributs sp√©cifiques.
        
        Args:
            name (str): Le nom de l'attaque.
            description (str): Une description de l'attaque.
            battle_cry (str): Le cri de guerre de l'attaque.
            durability (int): La durabilit√© de l'attaque.
            damage (int): Les d√©g√¢ts de l'attaque.
            drop_rate (int): Le taux de drop de l'attaque.
        """
        self.name = name
        self.description = description
        self.battle_cry = battle_cry
        self.durability = durability
        self.max_durability = durability if durability != -1 else -1
        self.damage = damage
        self.drop_rate = drop_rate

class Dialog:
    """
    Repr√©sente un dialogue dans le jeu.
    """
    def dialog(self, dialog: list):
        """
        Affiche un dialogue.
        
        Args:
            dialog (list): La liste des lignes de dialogue.
        """
        for speaker, text in dialog:
            if speaker == "-":
                self.naration(text)
            else:
                self.talk(speaker, text)

    def place_changement(self, new_place: str):
        """
        Affiche un message de changement de lieu.
        
        Args:
            new_place (str): Le nom du nouveau lieu.
        """
        system("clear")
        Prompt.ask(f"[bold][green]Vous changez d'endroit...\nBienvenue dans [underline]{new_place}[/underline][/green][/bold]")

    def talk(self, speaker:str, text: str):
        """
        Affiche un message de discussion.
        
        Args:
            speaker (str): L'interlocuteur du message.
            text (str): Le texte du message.
        """
        system("clear")
        Prompt.ask(f"[blue]{speaker} >[/blue] {text}\n\nAppuyez sur enter pour continuer..")

    def naration(self, text):
        """
        Affiche un message de narration.
        
        Args:
            text (str): Le texte de la narration.
        """
        system("clear")
        Prompt.ask(f"[yellow]VOIX OFF >[/yellow] {text}\n\nAppuyez sur enter pour continuer..")

class Dialog:
    """
    Repr√©sente un dialogue dans le jeu.
    """
    def dialog(self, dialog: list):
        """
        Affiche un dialogue.
        
        Args:
            dialog (list): La liste des lignes de dialogue.
        """
        for speaker, text in dialog:
            if speaker == "-":
                self.naration(text)
            else:
                self.talk(speaker, text)

    def place_changement(self, new_place: str):
        """
        Affiche un message de changement de lieu.
        
        Args:
            new_place (str): Le nom du nouveau lieu.
        """
        system("clear")
        Prompt.ask(f"[bold][green]Vous changez d'endroit...\nBienvenue dans [underline]{new_place}[/underline][/green][/bold]")

    def talk(self, speaker:str, text: str):
        """
        Affiche un message de discussion.
        
        Args:
            speaker (str): L'interlocuteur du message.
            text (str): Le texte du message.
        """
        system("clear")
        Prompt.ask(f"[blue]{speaker} >[/blue] {text}\n\nAppuyez sur enter pour continuer..")

    def naration(self, text):
        """
        Affiche un message de narration.
        
        Args:
            text (str): Le texte de la narration.
        """
        system("clear")
        Prompt.ask(f"[yellow]VOIX OFF >[/yellow] {text}\n\nAppuyez sur enter pour continuer..")


if __name__ == "__main__":
    dialog = Dialog()
    game = Game("Mon RPG")
    game.start()
